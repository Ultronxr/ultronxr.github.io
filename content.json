{"meta":{"title":"Ultronxr's Blog","subtitle":"Ultronxr's Blog","description":"Do something you have never done.","author":"ultronxr","url":""},"pages":[{"title":"","date":"2018-12-20T12:39:49.872Z","updated":"2018-12-20T12:39:49.872Z","comments":false,"path":"categories/index.html","permalink":"/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-12-20T12:39:33.328Z","updated":"2018-12-20T12:39:33.328Z","comments":false,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"test","slug":"test","date":"2018-12-20T02:48:17.000Z","updated":"2018-12-20T13:17:18.398Z","comments":true,"path":"2018/12/20/test/","link":"","permalink":"/2018/12/20/test/","excerpt":"—这里是文章摘要—","text":"—这里是文章摘要— 标题1标题2正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文 12//C测试printf(\"HelloWorld\"); 12//C++测试cout &lt;&lt; \"HelloWorld\" &lt;&lt; endl; 12//java测试System.out.println(\"HelloWorld\"); 123# python测试import math;print(\"HelloWorld\");","categories":[{"name":"测试","slug":"测试","permalink":"/categories/测试/"}],"tags":[{"name":"test","slug":"test","permalink":"/tags/test/"}]},{"title":"Java中的try catch finally语法（坑）","slug":"Try_catch_finally statement in java","date":"2018-11-11T16:00:00.000Z","updated":"2018-12-20T13:19:55.014Z","comments":true,"path":"2018/11/12/Try_catch_finally statement in java/","link":"","permalink":"/2018/11/12/Try_catch_finally statement in java/","excerpt":"以前都没有仔细注意过try catch finally的用途，只知道在代码里try catch一下，然后println一下异常提示。今天在做项目的时候被这个坑了好久，感叹自己学艺不精！下面讲一下里面的心路历程。","text":"以前都没有仔细注意过try catch finally的用途，只知道在代码里try catch一下，然后println一下异常提示。今天在做项目的时候被这个坑了好久，感叹自己学艺不精！下面讲一下里面的心路历程。 一、写这篇文章的起因 超级超级低级的错误！！！ 以前都没有仔细注意过try catch finally的用途，只知道在代码里try catch一下，然后println一下异常提示。 今天在做项目的时候被这个坑了好久，感叹自己学艺不精！下面讲一下里面的心路历程。 直接上代码（第一版的代码）： 123456789101112131415161718192021222324252627/** * @Description: 这是一个线程中的execute方法实例，用来在rabbitmq里注册一个consumer消费者，每隔一定时间去取消息队列中的信息 */public class TransferExecutor implements Runnable&#123; public void execute()&#123; try&#123; ...... Consumer consumer = new DefaultConsumer(channel); while(true)&#123; channel.basicConsume(queueName, autoAck, consumer); Thread.sleep(100); &#125; &#125; catch (Exception ex)&#123; ex.printStackTrace(); &#125; finally &#123; MyRabbitMQ.closeChannelAndConnection(channel, connection); &#125; &#125; @Override public void run()&#123; execute(); &#125;&#125; 上面这段代码完全可以正常运行，甚至一段相当长的时间内都看不出异常。。。 直到我用rabbitmq自带的可视化界面看了一下我的队列，发现我的队列绑定着上百个consumer（要不是IDEA报错我可能现在还没发现）。 原因是 channel.basicConsume() 方法并不是单单从队列中取出信息消费一次（重点），而是注册一个消费者consumer持续地进行消费，直至channel关闭或手动删除consumer。 修改了，然后就有了第二版代码： 123456789101112131415161718192021public class TransferExecutor implements Runnable&#123; public void execute()&#123; try&#123; ...... Consumer consumer = new DefaultConsumer(channel); channel.basicConsume(queueName, autoAck, consumer); //不是说注册消费者吗，那我就只注册一个呗。 &#125; catch (Exception ex)&#123; ex.printStackTrace(); &#125; finally &#123; MyRabbitMQ.closeChannelAndConnection(channel, connection); &#125; &#125; @Override public void run()&#123; execute(); &#125;&#125; 然后呢，代码直接就不能用了，不是说不能运行，而是publish新的消息没有消费者去处理，然后发现在队列上完全没有消费者绑着。 调了很久，一直找不出错误，一度怀疑是 Executors.newFixedThreadPool(10) 的线程池有问题。。。 然后这里把代码简化了就能一眼看出来了，try运行完了没有抛出异常直接就转到finally里的代码了，线程在运行，却关闭了消息队列的连接，当然没法消费了（再次重点）。 二、借此机会摘记一下try catch finally的用法和运行顺序 据说有些公司拿这个当过面试和笔试题（别人博客上看到的）。 考运行顺序一般是和return exit这些函数放在一起考的，详见下面的摘记或博客（这里我列了一些我看到的比较好的博客）： Java异常机制–try catch finally 执行顺序详解 Java异常捕获之try-catch-finally-return的执行顺序 以后会填坑的（小声逼逼..） 三、总结 学艺不精，继续努力！","categories":[{"name":"java","slug":"java","permalink":"/categories/java/"},{"name":"problems","slug":"java/problems","permalink":"/categories/java/problems/"}],"tags":[{"name":"java","slug":"java","permalink":"/tags/java/"},{"name":"problems","slug":"problems","permalink":"/tags/problems/"}]},{"title":"使用IDEA创建maven web项目","slug":"Create maven web project using IDEA","date":"2018-09-30T16:00:00.000Z","updated":"2018-12-20T13:23:42.193Z","comments":true,"path":"2018/10/01/Create maven web project using IDEA/","link":"","permalink":"/2018/10/01/Create maven web project using IDEA/","excerpt":"使用IDEA创建maven web项目","text":"使用IDEA创建maven web项目 一、新建项目 1.在刚打开的IDEA页面点击 Create New Project 按钮 或者 在项目界面点击菜单中的 File–New–Project 选项； 2.在弹出的新建项目对话框中选择左边的Maven选项，在右侧列表中勾上Create from archetype复选框，选择maven-archetype-webapp选项，点击Next按钮进入下一步； 3.填写GroupId和ArtifactId，第一个是组织名称，第二个是项目标识名，两者意义的详细介绍自行百度，第三个Version 1.0-SNAPSHOT代表项目是测试版本，不是稳定版本，点击Next按钮进入下一步； 4.配置maven页面，可以使用IDEA自带的，也可以选择自己安装的maven。我这里是自己安装的maven，第一个Maven home directory选择maven的安装路径，第二个User settings file打上Override的勾，然后选择maven安装路径中conf文件夹下的settings.xml配置文件，其他的不用改，点击Next按钮进入下一步； 5.这里就改一下项目所在的路径就可以了，基本不变，点击Finish即可； 二、配置项目 1.新建的项目的文件树如下： 2.在main文件夹内新建两个并列的文件夹，一个是java，一个是resources。建好后点击菜单栏右上角的项目结构按钮，选择左边的Modules选项卡，在右边把java文件夹标记为Sources，把resources文件夹标记为Resources； 3.点击Apply后切换到Facets选项卡，点击右边的加号，选择Web，在弹出来的对话框中选择你的项目，点击OK； 4.点击OK后会自动跳转到Modules选项卡，切回到Facets选项卡，选中刚刚新建的Web，在右侧Deployment Description中，选中内容点击小铅笔图标，修改Path为当前项目的web.xml文件路径； 5.然后修改Web Resource Directories，选中内容点击小铅笔图标修改为当前项目的webapp目录，修改好后点击Apply； 6.切换到Artifacts选项卡，点击右边的加号，选择Web Application: Exploded，选择From Modules，在弹出来的对话框中选择当前项目，点击OK，完成后如下图； 7.点击Apply应用修改，点击OK关闭窗口，点击菜单栏右上方一个小锤子右边的Add Configuration按钮，在弹出来的对话框里点击加号，依次选择Tomcat Server – Local； 8.在右侧选择Deployment选项卡，点击右侧的加号，选择Artifact，完成后修改Application context为项目名（也可以是别的名称，这个是用来指定url中根目录下具体路径的）； 9.切换到Server选项卡，自上往下依次修改： Name 随便写 Application server 选一个tomcat，如何配置tomcat略 Open browser中的After launch前面的勾勾上就会在运行项目时自动打开浏览器，浏览器选择Chrome On ‘Update’ action 和 On frame deactivation两个选项都改成 Update classes and resources，这样修改代码就会自动更新到tomcat里而不用重启服务器 下面的HTTP端口按照自己的配置因人而异 10.点击Apply和OK后，点击右上方的运行按钮，就是一个向右的小三角，如果等待一会后浏览器打开跳转到了项目页面，显示了Hello World（index.jsp中的内容），说明配置成功。点击IDEA右上方红色的小方块停止运行。 三、导出项目成war包 1.打开Project Structure对话框，切换到Artifacts选项卡，点击加号新建，选择Application Web: Archive，如果配置了前面的Application Web: exploded的话，这里会有 ‘For 你的项目名称’ 的选项，直接点击这个，Output Directory可以修改成别的文件夹，点击Apply和OK退出； 2.点击菜单栏里的Build按钮，选择Build Artifacts选项，在弹出来的选项中选择后缀为 :war 的选项（没有exploded 的选项），点击Build就会生成war包了。 四、参考资料 1.idea2017创建maven web项目 2.IDEA中创建maven web项目的详细部署 3.idea将项目导出为war包","categories":[{"name":"javaweb","slug":"javaweb","permalink":"/categories/javaweb/"}],"tags":[{"name":"java","slug":"java","permalink":"/tags/java/"},{"name":"javaweb","slug":"javaweb","permalink":"/tags/javaweb/"},{"name":"maven","slug":"maven","permalink":"/tags/maven/"},{"name":"IDEA","slug":"IDEA","permalink":"/tags/IDEA/"}]},{"title":"IDEA中编译器与项目的java版本不同导致编译失败的解决办法","slug":"Compiling failure due to the differences between project and java complier","date":"2018-09-30T16:00:00.000Z","updated":"2018-12-20T13:25:46.904Z","comments":true,"path":"2018/10/01/Compiling failure due to the differences between project and java complier/","link":"","permalink":"/2018/10/01/Compiling failure due to the differences between project and java complier/","excerpt":"IDEA中编译器与项目的java版本不同导致编译失败的解决办法","text":"IDEA中编译器与项目的java版本不同导致编译失败的解决办法 一、错误征兆 IDEA中编译项目有时会出现以下几种报错情况，基本上是因为编译器和项目的java版本不匹配： 12@Override is not allowed when implementing interface method//Override不能用 12Error:java: Compilation failed: internal java compiler error //编译器出错 二、解决办法 1.先打开项目结构Project Structure对话框，选择Project选项卡，检查Project SDK和Project language level是否匹配，1.8的JDK应该对应于8的language level； 2.切换到Modules选项卡，检查language level是否匹配和上一步中的language level匹配； 3.打开IDEA系统设置对话框，定位到 Build,Execution,Deployment –&gt; Compiler –&gt; Java Compiler 选项卡，修改右侧的Module中的Target bytecode version，使其匹配当前的JDK版本； 4.因为我这里用的是1.8的JDK，所以其他的language level都是设置成8的，其他版本的JDK应该设置成相对应的数值。 三、参考资料 1.idea @Override is not allowed when implementing interface method解决办法 2.Error:java: Compilation failed: internal java compiler error 解决办法","categories":[{"name":"IDEA","slug":"IDEA","permalink":"/categories/IDEA/"}],"tags":[{"name":"java","slug":"java","permalink":"/tags/java/"},{"name":"IDEA","slug":"IDEA","permalink":"/tags/IDEA/"}]},{"title":"在Windows上安装maven，并且在eclipse和IDEA中配置maven","slug":"How to install maven on windows and the setup of maven in eclipse and IDEA","date":"2018-09-30T16:00:00.000Z","updated":"2018-12-20T13:24:13.051Z","comments":true,"path":"2018/10/01/How to install maven on windows and the setup of maven in eclipse and IDEA/","link":"","permalink":"/2018/10/01/How to install maven on windows and the setup of maven in eclipse and IDEA/","excerpt":"在Windows上安装maven，并且在eclipse和IDEA中配置maven","text":"在Windows上安装maven，并且在eclipse和IDEA中配置maven 一、下载和配置maven 1.下载maven压缩包进入Apache maven下载页面，选择Windows对应的maven压缩包，点击下载。如果有版本要求在下面的历史版本中找。 2.配置maven1) 配置前请先确认你正确安装了Java的jdk； 2) 把下载的压缩包解压到某路径内，我的是 D:\\JAVA\\apache-maven-3.5.4 ； 3) 修改maven配置： 打开 conf 文件夹内的 settings.xml 文件，按照下面修改： 在图示位置加上 下面这一段代码，作用是指定路径作为本地仓库所在的文件夹，你也可以指定其他的路径文件夹（默认的仓库是是C盘当前用户文件夹内的.m2文件夹，修改到别的位置防止C盘占用太多）： 1&lt;localRepository&gt;D:\\JAVA\\ApachemavenRepository&lt;/localRepository&gt; 继续在图片所示位置加上以下代码，注意要加在两个&lt;mirrors&gt;``标签之间，代码的作用是把阿里云maven仓库作为远程仓库： 123456&lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; 保存后关闭文件。 4) 接下来配置环境变量： 在 系统变量 中新建一个变量，名称为 MAVEN_HOME ，值为 D:\\JAVA\\apache-maven-3.5.4 （你解压maven的路径）； 在 系统变量 的 PATH 变量里新加一个值 %MAVEN_HOME%\\bin ； 保存退出。 5) 验证maven是否安装成功： 打开cmd窗口，输入 mvn -v 命令，如果输出了maven的版本信息，说明安装成功，如下图所示。 二、在eclipse中配置maven 1.点击菜单栏中的Windows选项，打开Preferences选项卡; 2.找到Maven选项里的Installations选项： 3.点击右侧的Add按钮，在弹出来的对话框中点击Diretory按钮，选择解压maven的目录； 4.选好后点击Finish按钮回到开始的选项处，发现列表中多了一条我们自定义的maven，把这条maven前面的复选框勾上，点击Apply按钮应用更改。 5.选择左边的User Settings选项； 6.点击第一个Browse按钮，选择解压maven路径下的conf文件夹里的settings.xml文件； 7.上一步完成后，你会发现第三个Local Repository处自动变成了你的maven配置文件里指定的本地仓库的路径； 8.点击Apply和Apply and Close应用后退出即可。 三、在IDEA中配置maven 1.点击菜单中的File选项，选择Settings； 2.定位到左边选项列表中的 Build,Execution,Deployment –&gt; Build Tools –&gt; Maven 选项； 3.点击Maven选项，在右边的 Maven home directory 处选择解压maven的路径， 在User settings file后面的Override勾勾打上，选择解压maven路径中conf文件夹内的settings.xml文件， 选择完成后，下面的Local repository会自动修改为配置文件中本地仓库的路径； 点击Apply保存修改； 4.点击Maven选项下的Importing选项，把 Importing Maven projects automatically 前面的勾勾上，点击Apply保存修改； 5.点击Maven选项下的Repositoroes选项，选中刚才我们自己设置的maven，点击右侧Update按钮更新本地仓库。 6.至此配置完成。 四、参考资料 1.apache maven下载页面 2.Eclipse配置maven环境 3.如何使用IntelliJ IDEA 配置Maven","categories":[{"name":"javaweb","slug":"javaweb","permalink":"/categories/javaweb/"}],"tags":[{"name":"java","slug":"java","permalink":"/tags/java/"},{"name":"javaweb","slug":"javaweb","permalink":"/tags/javaweb/"},{"name":"maven","slug":"maven","permalink":"/tags/maven/"},{"name":"IDEA","slug":"IDEA","permalink":"/tags/IDEA/"},{"name":"eclipse","slug":"eclipse","permalink":"/tags/eclipse/"}]},{"title":"IDEA中编译器与项目的java版本不同导致编译失败的解决办法","slug":"How to create a 4 inch photo with photoshop","date":"2018-09-21T16:00:00.000Z","updated":"2018-12-20T13:27:10.059Z","comments":true,"path":"2018/09/22/How to create a 4 inch photo with photoshop/","link":"","permalink":"/2018/09/22/How to create a 4 inch photo with photoshop/","excerpt":"使用Photoshop创建4寸照","text":"使用Photoshop创建4寸照 一、处理方法 1.新建4寸（宽度：7.6cm 高度：10cm 分辨率：300dpi像素/英寸）大小的白色背景画布； 2.打开照片，拖进背景文件里，按住shift键等比例调整大小，完全盖住背景画布； 3.处理照片图层，锐化什么的。。。 4.右键照片图层，向下合并，与背景成为同一个图层； 5.保存即可。 二、参考资料 怎么用adobe photoshop做4寸照片","categories":[{"name":"photoshop","slug":"photoshop","permalink":"/categories/photoshop/"}],"tags":[{"name":"photoshop","slug":"photoshop","permalink":"/tags/photoshop/"}]},{"title":"在Windows上安装maven，并且在eclipse和IDEA中配置maven","slug":"Java jdk setting up and tomcat installation","date":"2018-09-16T16:00:00.000Z","updated":"2018-12-20T13:28:15.358Z","comments":true,"path":"2018/09/17/Java jdk setting up and tomcat installation/","link":"","permalink":"/2018/09/17/Java jdk setting up and tomcat installation/","excerpt":"Windows下 Java JDK 和 Tomcat 的安装配置","text":"Windows下 Java JDK 和 Tomcat 的安装配置 一、安装配置JDK1.安装配置JDKJDK压缩包下载解压到一个文件夹里，然后编辑系统环境变量 系统变量→新建 JAVA_HOME 变量，内容填写JDK解压后的根目录，如 D:\\JAVA\\jdk1.8.0_131 ； 系统变量→找到 Path 变量，添加 %JAVA_HOME%\\bin 和 %JAVA_HOME%\\jre\\bin 两个变量， 有些系统可能不支持 %JAVA_HOME% 这样的格式，就添加带绝对路径的 D:\\JAVA\\jdk1.8.0_131\\bin 和 D:\\JAVA\\jdk1.8.0_131\\jre\\bin 这样的变量； 系统变量→新建 CLASSPATH 变量，内容填写 .;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar 。 2.检验JDK是否安装成功打开 cmd 输入 java java -version javac 三个命令，如果都有输出提示如何使用命令或者显示java版本则安装成功，如果输出显示不是内部或外部命令，也不是可运行的程序或批处理文件什么的就是没有成功。 二、Windows下安装和配置Tomcat1.下载解压安装包进入Tomcat官网，在页面左边Download处选择合适的版本，点击进入下载页面，按照系统下载32位或者64位的压缩包； 把压缩包解压到合适的路径，我的路径是 C:\\Program Files\\Apache Software Foundation\\tomcat7.0.90 ，解压出来的文件截图： 2.配置安装Tomcat1) 在系统环境变量里的分别新建两个变量 CATALINA_BASE 和 CATALINA_HOME 里面填写的内容都是Tomcat的解压目录，我的是 C:\\Program Files\\Apache Software Foundation\\tomcat7.0.90 2) 在系统环境变量Path中添加两条内容： %CATALINA_HOME%\\lib %CATALINA_HOME%\\bin 3) 打开cmd进入 C:\\Program Files\\Apache Software Foundation\\tomcat7.0.90\\bin 目录， 执行 service.bat install 命令安装Tomcat服务（卸载Tomcat服务的命令： service.bat remove ）。 如果显示 The service ‘Tomcat x’ has been installed. 就是安装完成了。 4) 安装完成后打开系统服务管理，找到Tomcat服务，手动打开即可，也可以设置自动启动等选项。 3.添加Tomcat管理员用户1) 进入 C:\\Program Files\\Apache Software Foundation\\tomcat7.0.90\\conf 目录，打开 tomcat-users.xml 文件； 2) 在 &lt;tomcat-users&gt; 和 &lt;/tomcat-users&gt; 之间添加以下代码：1234&lt;role rolename=&quot;manager-gui&quot;/&gt;&lt;user username=&quot;example1&quot; password=&quot;example1&quot; roles=&quot;manager-gui&quot;/&gt;&lt;role rolename=&quot;admin-gui&quot;/&gt;&lt;user username=&quot;example2&quot; password=&quot;example2&quot; roles=&quot;admin-gui&quot;/&gt; 两个example1和example2是两组用户名和密码，按需要修改。 3) 修改完成后保存退出，重新启动Tomcat服务（重要！！！）。 4.验证Tomcat是否安装成功启动Tomcat服务后（如果不启动会显示网址无法访问），使用浏览器打开 http://localhost:8080/ 网址，如果显示下图则安装成功： 然后点击右边的三个按钮。 前两个按钮用example1的那组用户名密码登录，最后一个用example2的那组用户名密码登录，如果显示类似的界面则说明管理员账户可以正常使用。 如果显示这样的界面则说明管理员账户设置失败，按照页面提示重新设置即可（设置完了别忘了重启Tomcat服务！）。 最后标注一点，如果使用eclipse或者IDEA编译器运行JavaWeb项目，要先把Tomcat服务关闭，否则会报端口占用的错。除非自己修改Tomcat的端口。 三、参考资料 Tomcat官网 windows10配置jdk和Tomcat","categories":[{"name":"java","slug":"java","permalink":"/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"/tags/jdk/"},{"name":"tomcat","slug":"tomcat","permalink":"/tags/tomcat/"}]},{"title":"Windows下Redis的安装与设置","slug":"The installation and setup of Redis on Windows","date":"2018-08-14T16:00:00.000Z","updated":"2018-12-20T13:29:06.936Z","comments":true,"path":"2018/08/15/The installation and setup of Redis on Windows/","link":"","permalink":"/2018/08/15/The installation and setup of Redis on Windows/","excerpt":"Windows下Redis的安装与设置","text":"Windows下Redis的安装与设置 一、Redis简介Redis 是完全开源免费，遵守 BSD 协议的一个高性能的 key-value 数据库。 Redis 的特点： 性能极高; 提供 key-value, list, set, zset, hash 等数据结构的存储; 支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作; 所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行; 二、Windows下安装和配置Redis1.安装前的注意事项 仅可在 Windows x64位 上安装 安装前请升级Windows上的 .NET Framework 至4.0版本以上，否则会安装程序会自动结束无法安装，可以在cmd中输入 dir %WINDIR%\\Microsoft.Net\\Framework\\v* /O:-N /B 命令查看当前安装的版本 2.下载安装包链接：Redis在GitHub上的项目网址 可以选择msi安装包或者zip压缩包下载，装好的内容是一样的，随意选。我这里选择msi安装包下载。 3.安装打开安装包，点击 Next 进入下一步； 同意用户许可协议，点击 Next 进入下一步； 选择安装路径，同时选中下面的复选框，把安装目录添加到系统环境变量； 设置端口，这里保持默认，选中下面的复选框，添加防火墙例外，保证外部可以正常访问Redis服务； 设置最大占用空间限制，可以不设置，我这里设置了10G的大小； 点击 Install 安装，Win10和Win7上会要求提供管理员权限，选 是 ； 等待安装完成，点击 Finish 退出安装程序； 下面是安装完成后的文件列表，同时系统环境变量 PATH 中会有安装目录的变量。 4.配置进入安装目录，使用文本编辑器（推荐Notepad++或Sublime）打开 redis.windows-service.conf 文件，注意是有 service 的文件，不是另一个！ 打开之后找到 requirepass 所在的行，在下面另起一行，写入 requirepass 123456 ，123456是redis的密码，可以自己设置； 完成后保存文件退出。 依次 右键点击”我的电脑” - 打开”管理” - “服务和应用程序” - “服务”，在右侧找到名为 Redis 的服务项，查看是否已启动。没有启动的话手动启动它。如果已经启动的话请停止后重新启动（为了刷新密码验证设置）。 三、检查是否安装成功1.进入Redis服务检验打开cmd窗口，输入 redis-cli 回车，如果显示了本地地址和端口号，则说明Redis服务正常。 2.Redis读写检验设置了密码之后，需要输入 auth 123456 使用密码来通过验证，显示 OK 则成功； 输入 set testkey &quot;hello redis&quot; 新增一个键值，再输入 get testkey 读取刚刚新建的键值，若能写入和读取则安装成功； 输入 del testkey 删除键值； 输入 exit 退出Redis。 四、参考资料 Redis官网 Redis的GitHub项目 Redis在线试用 Redis教程","categories":[{"name":"Windows工作环境搭建","slug":"Windows工作环境搭建","permalink":"/categories/Windows工作环境搭建/"}],"tags":[{"name":"redis","slug":"redis","permalink":"/tags/redis/"}]},{"title":"CentOS 7下搭建Kubernetes(k8s)集群","slug":"Create a kubernetes cluster on CentOS7","date":"2018-08-08T16:00:00.000Z","updated":"2018-12-20T13:30:05.713Z","comments":true,"path":"2018/08/09/Create a kubernetes cluster on CentOS7/","link":"","permalink":"/2018/08/09/Create a kubernetes cluster on CentOS7/","excerpt":"CentOS 7下搭建Kubernetes(k8s)集群","text":"CentOS 7下搭建Kubernetes(k8s)集群 一、参考网址Centos7.3安装Kubernetes集群","categories":[{"name":"Linux工作环境搭建","slug":"Linux工作环境搭建","permalink":"/categories/Linux工作环境搭建/"}],"tags":[{"name":"docker","slug":"docker","permalink":"/tags/docker/"},{"name":"kubernetes","slug":"kubernetes","permalink":"/tags/kubernetes/"}]},{"title":"Windows环境下安装Ruby组件和配置，以及利用jekyll和GitHub Pages在GitHub上搭建个人博客","slug":"Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages","date":"2018-08-07T16:00:00.000Z","updated":"2018-12-20T13:30:59.755Z","comments":true,"path":"2018/08/08/Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages/","link":"","permalink":"/2018/08/08/Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages/","excerpt":"Windows环境下安装Ruby组件和配置，以及利用jekyll和GitHub Pages在GitHub上搭建个人博客","text":"Windows环境下安装Ruby组件和配置，以及利用jekyll和GitHub Pages在GitHub上搭建个人博客 一、安装ruby和相关组件1.下载ruby在官网下载ruby安装包.注意不要下载最新的，有些组件可能不支持最新版的ruby. 选择下图的安装包，或者使用这里提供的链接直接下载ruby2.4.4x64的安装包. 2.安装ruby打开安装包，选择同意协议书点Next; 选择安装目录，我这里选择安装在 D:\\ruby_msys64 ，下面的三个选项都打勾; 点击Install之后弹出组件选择界面，这里的MSYS2一定要选上，点Next; 安装界面，等待安装完成; 安装完成之后直接点Finish，默认的勾勾着; 点击Finish后弹出来一个cmd窗口，有三个选项，输入3回车; 等待安装完成后的界面，回车退出 如果没有弹出cmd窗口，可以手动打开cmd窗口输入 ridk install ，会有和上一步同样的界面，按上一步做即可. 3.下载gem下载安装gem，官网截图如下，选择zip版本，直接下载链接; 4.安装gem把压缩包解压到指定文件夹，我这里是 D:\\ruby_msys64\\rubygems-2.7.7 ，下面是解压出来的文件; 打开cmd窗口，cd进入这个文件夹，输入 ruby setup.rb ，下面正常安装后的界面; 5.下载DevKit下载DevKit，官网，安装包直接下载链接; 6.安装DevKit打开安装包，选择目录，我这里解压到 D:\\ruby_msys64\\DevKit ，点Extract; 解压过程如下，等待解压完成; 这是解压出来的文件; 打开cmd，cd进入解压的路径，输入 ruby dk.rb init ，以下是初始化成功的界面; 输入 ruby dk.rb install ，以下是安装过程; 检查安装是否成功：输入 gem install rdiscount --platform=ruby ，如果正常安装显示以下界面，则安装成功; 二、修改源1.修改MSYS2的源教程链接 进入 D:\\ruby_msys64\\Ruby24-x64\\msys64\\etc\\pacman.d 目录： 编辑mirrorlist.mingw32 ，在文件开头添加： Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/i686 编辑mirrorlist.mingw64 ，在文件开头添加： Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/x86_64 编辑mirrorlist.msys ，在文件开头添加： Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/msys/$arch 然后打开 D:\\ruby_msys64\\Ruby24-x64\\msys64\\msys2.exe ，执行 pacman -Sy 刷新软件包数据即可. 2.修改gem的源教程链接 查看当前使用的源地址，输入 gem sources; 删除默认的源地址，输入： gem sources -r url地址 注：默认的url地址后必须有”/”,否则删不掉 添加国内的源地址: gem sources -a https://gems.ruby-china.com 更新源的缓存: gem sources -u 三、安装bundle和jekyll1.安装bundle打开cmd窗口，输入 gem install bundler 后回车，提示是否覆盖输入y回车。以下是bundle安装成功界面： 2.安装jekyll打开cmd窗口，输入gem install jekyll 后回车，这里需要耐心一点，会安装挺久的。以下是安装成功界面： 如果在”Building native extensions. This could take a while…”这里报错，说明DevKit没有安装好，验证安装DevKit是否成功那一步就应该通不过，重新安装DevKit即可。 四、搭建博客和本地调试1.第一种方法：直接fork别人现成的博客先创建一个GitHub账户，然后登录，balabala… 这里以fork我的博客为例，先进入我的仓库，点击右上角的fork按钮（我这里是自己看自己的仓库所以不能fork）; fork完后博客就在自己的仓库里了。如果有CNAME文件的话，把这个文件删除（这个文件是自定义域名的文件，不删掉的话会域名冲突），修改完成后点击Commit提交修改; 点击Settings按钮进入仓库设置; 先设置项目名称，改成 *.github.io 的形式，* 的位置是自己GitHub的用户名; 修改完成后向下拉，看到GitHub Pages的地方，显示 Your site is published at https://*.github.io 就可以了，你就可以通过浏览器访问这个网址，看到你的博客网站，只不过现在里面显示的还是我的内容，后面可以慢慢改; 然后使用git clone整个项目克隆到本地，进行修改; 根目录下部分文件夹的作用： 12345678910_config.yml : 全局配置文件，按照其中的注释说明修改成自己的内容README.md : 项目说明文件CNAME : 可能存在可能不存在，存在的话说明博客网站被解析到别的域名，域名记录在文件中_posts/ : 放博客文章的文件夹，里面的文件是markdown文件格式assets/ : 博客中用到的媒体等资源的文件_layouts/ : 博客页面的模版框架page/ : 主菜单中每个页面的模版框架其他的文件夹是各页面的HTML文件，你可以点进去看看，尝试改变一下 下面是博客页面的本地调试方法： 先把GitHub博客项目clone到本地; 打开cmd窗口，cd进入项目文件夹，输入 gem install github-pages ，系统会自动安装需要的组件，安装成功的界面如下; 在cmd窗口输入 jekyll server --watch 命令，显示如下，在浏览器里输入显示的Server address后面的网址就可以预览博客网站，按ctrl+c可以停止预览 调试完成后的博客可以push到GitHub项目仓库中. 2.第二种方法：自己在GitHub上新建一个GitHub Pages新建一个项目仓库，在仓库页面顶部点击New按钮; 在新建页面填写项目名称，博客的名称是 *.github.io 的形式， * 是自己的GitHub用户名，填写项目描述（可选），选择Public，创建一个README文件，完成后点击Create repository按钮，创建完成; 创建完成后在项目顶部点击Settings按钮进入设置; 下拉直到GitHub Pages的地方可以看到 Your site is published at https://*.github.io的信息，说明已经创建成功（可以通过浏览器访问这个网址进入博客页面），点击Choose a theme按钮选择博客的主题样式; 选择一个主题样式，点击Select theme按钮，完成选择; 跳转到README文件编辑页面，README文件主要记录着项目的相关信息和主题样式的相关信息等，可以自己修改内容，也可以下拉到底部点击Commit changes直接跳过这一步以后再修改; 新建项目完成后，可以尝试进入博客网址查看新建的博客页面; 用这种方法创建的博客的本地调试博客方法与第一种相同，调试完成后的博客可以push到GitHub项目仓库中. 3.使用jekyll在本地创建一个博客模版在本地cmd窗口运行jekyll new blog命令，会在本地创建一个完整的博客模版，创建的速度可能会很慢，和网速有关。创建的位置会在窗口中显示，可以把整个文件夹剪切到别的目录下; 根目录文件内容如下: 1234Gemfile : 内容是博客相关所需的组件_config.yml : 记录博客的配置内容_posts/ : 文件夹下是博客页面（markdown格式的页面，写也要按照这个格式） 打开cmd窗口，cd到文件夹的目录位置下，输入 bundle install 命令，命令会根据当前目录下的Gemfile，安装所需要的所有软件。这一步所安装的东西，可以说跟github本身的环境是完全一致的，所以可以确保本地如果没有错误，上传后也不会有错误；如果以后修改了Gemfile，可以执行 bundle update 命令进行更新; 下面是博客页面的本地调试方法： 在该路径下执行 bundle exec jekyll serve 命令，系统会在本地开启博客页面预览，在浏览器里输入Server address后面显示的网址就可以预览，使用ctrl+c关闭预览; 调试完成后的博客可以push到GitHub项目仓库中. 五、把你的博客解析到别的域名GitHub Pages的页面很难被百度等搜索引擎抓取，也就是说你的博客很难被别人发现，这时如果你有另外注册的域名，就可以用来解析这个博客网址.（或者使用Coding Net等第三方项目托管平台，我本人没试过，你们可以试试） 在项目的Settings下的GitHub Pages中的Custom domain修改（修改了这里就不用手动修改后面的CNAME文件了，系统会自动创建）; 或者在项目根目录下新建一个文件CNAME，里面写你的域名（域名不需要写https://www的部分），修改好后就可以在GitHub Pages的提示中看到 Your site is published at https://....... ，这样就可以通过自己的域名访问你的博客 六、博客页面的撰写markdownmarkdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等）. GitHub Pages上的博客页面都是使用markdown语言编写的，所以先学学markdown才能写博客（可能我以后会总结一下markdown的语法写个博客(挖坟预定)）. 博客文件的位置在根目录的 _post 文件夹下，命名规则为 yyyy-mm-dd-NameOfBlog.md 如 2018-01-01-my first blog.md . 七、其他jekyll主题官网里面有很多其他的主题，可以点此跳转. 找到合适的主题后点进去，可以直接Download，或者GitHub页面fork过来然后clone到本地修改. 别人创建的主题拿过来之后，需要修改其中的 _config.yml 配置文件，把里面的内容修改成自己的信息，同时其他内容的修改可以参照 README 文件 修改完成后可以本地预览调试，然后push到自己的GitHub;","categories":[{"name":"Windows工作环境搭建","slug":"Windows工作环境搭建","permalink":"/categories/Windows工作环境搭建/"}],"tags":[{"name":"jekyll","slug":"jekyll","permalink":"/tags/jekyll/"},{"name":"ruby","slug":"ruby","permalink":"/tags/ruby/"},{"name":"blog","slug":"blog","permalink":"/tags/blog/"}]}]}