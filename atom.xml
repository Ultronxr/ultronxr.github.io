<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ultronxr&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/ced1b7e1aa7027e6541678539ecf9154</icon>
  <subtitle>Ultronxr&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ultronxr.xyz/"/>
  <updated>2018-12-24T17:25:29.496Z</updated>
  <id>https://ultronxr.xyz/</id>
  
  <author>
    <name>ultronxr</name>
    <email>f_1208@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>word和pdf的比较——为什么正式场合更多使用pdf</title>
    <link href="https://ultronxr.xyz/2018/12/25/the-comparison-of-pdf-and-word/"/>
    <id>https://ultronxr.xyz/2018/12/25/the-comparison-of-pdf-and-word/</id>
    <published>2018-12-24T16:03:46.000Z</published>
    <updated>2018-12-24T17:25:29.496Z</updated>
    
    <content type="html"><![CDATA[<p>学习工作中，word的格式排版确实让人伤脑筋。而说到word，则不得不提在正式场合更多使用的pdf格式。正巧前几天看到了一遍关于这个的博客写得很好，我这里简单总结一下，比较一下两者的特点和不同，两者的格式转换为什么这么困难，以及为什么正式场合更多使用pdf而不是word。</p><a id="more"></a><h1 id="一、word和pdf的特点"><a href="#一、word和pdf的特点" class="headerlink" title="一、word和pdf的特点"></a>一、word和pdf的特点</h1><p>pdf格式有“通用性好”、“格式不易变化”等特点。其中“通用性好”指的是不论是在什么平台或者用什么版本的pdf阅读器打开pdf文件，pdf总是能够展现出相对正确的格式。“格式不易变化”则是指一个pdf文件一旦生成，他就会一直保持相对稳定的格式，不会变化。而反观word，仅仅是换了台计算机打开，其中的文本格式和字体等可能就会发生变化，让人难以阅读，更别说不同的人用着不同版本的word了。</p><p>但是pdf也有一些让人“敬而远之”的缺点。第一就是“无法复制”，大部分的pdf文件都无法通过简单的“选择——复制”操作来复制其中的“文本”，这恐怕是学生党最不喜欢pdf的地方了o(╥﹏╥)o，连简单的复制都没法实现，怎么不学学word？？？第二则是“难以编辑”，就连复制都难，更别提修改其中的内容了。在这点上，word就显得使用更加简单了。</p><p>word和pdf为什么会有如此大的不同？下面我会简单谈谈word和pdf的原理，从而解答这些问题。</p><p><br> <br></p><h1 id="二、word和pdf的实现原理"><a href="#二、word和pdf的实现原理" class="headerlink" title="二、word和pdf的实现原理"></a>二、word和pdf的实现原理</h1><h2 id="1-word的实现原理"><a href="#1-word的实现原理" class="headerlink" title="1.word的实现原理"></a>1.word的实现原理</h2><p>首先，word的实现原理是<code>标记语言 (Markup Language) 文档</code>，啥意思？就是说word中的文本显示效果是通过在文本周围加上属性标签来实现控制显示样式等操作的，下面是一个简单的例子：</p><p>新建一张空白word，在中间打上“Hello world!”一行文字，设置水平居中，对doc文件进行解包处理，得到的相关结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;w:pPr&gt;&lt;w:jcw:val=&quot;center&quot;/&gt;&lt;w:rPr&gt;</span><br><span class="line">&lt;w:rFontsw:ascii=&quot;Times&quot;w:hAnsi=&quot;Times&quot;/&gt;&lt;w:langw:val=&quot;en-US&quot;/&gt;</span><br><span class="line">&lt;/w:rPr&gt;&lt;/w:pPr&gt;&lt;w:rw:rsidRPr=&quot;003C75CF&quot;&gt;&lt;w:rPr&gt;</span><br><span class="line">&lt;w:rFontsw:ascii=&quot;Times&quot;w:hAnsi=&quot;Times&quot;/&gt;&lt;/w:rPr&gt;&lt;w:t&gt;Hello world!&lt;/w:t&gt;&lt;/w:r&gt;</span><br></pre></td></tr></table></figure><p>现在可以很清楚得看到，代码中全是属性标签。从包含了输入内容的最后一行代码看起，字体在w:rFontsw标签中定义为Times，第一行的w:jcw标签控制的是段落样式center居中对齐。</p><p>这就是标记语言，实际上和HTML等文件的工作原理类似。</p><h2 id="2-pdf的实现原理"><a href="#2-pdf的实现原理" class="headerlink" title="2.*pdf的实现原理"></a>2.*pdf的实现原理</h2><p><code>pdf的本质就是数字化的纸张，计算机对pdf的操作实际上是打印</code></p><p>首先pdf，可以理解为“电子版的虚拟打印”，就是实体文档在计算机中的影像，而不是实际的文本。计算机对pdf的操作可以理解为“模拟对一张实际的纸张的操作”，例如进行pdf的复制操作，可以理解为“把一张纸上的内容抄写到另一张纸上”，计算机并不知道它抄写的是什么，只是“依样画葫芦”地抄写，而不是复制。</p><p>知道了这个，就不难理解为什么pdf有难以编辑的缺点了，一份pdf打印出来之后，它的内容，包括文字的内容，文字相对于纸张的位置，文字的字体、大小等都被确定了，很难被改变。</p><p>其他格式的文件格式都是“新建”或者“保存”的，而pdf则是“导出”或者是“打印”的，这也说明了pdf的“数字化纸张”的特点。</p><p>下面同样以一份pdf文件，其中居中打印了“Hello world!”文本的源码来作说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BT10011036572 Tm /TT1 12 Tf [ (He) 24 (l) -48 (l) -48 (o) ]TJETBT </span><br><span class="line">10011147572 Tm /TT1 12 Tf ( ) TjETBT </span><br><span class="line">10011160572 Tm /TT1 12 Tf [ (w) 24 (or) -84 (l) -24 (d) ] TJET</span><br></pre></td></tr></table></figure><p>这些符号也许会让你一头雾水，但是查阅相关资料，进行可读化“翻译”之后，则是以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">【文字开始】 缩放比例1倍 坐标(1036,572) 【文字定位】 /TT1 12磅 【选择字体】 [ (He) 间距24 (l) 间距-48 (l) 间距-48 (o) ] 【绘制文字】【文字结束】</span><br><span class="line">【文字开始】 缩放比例1倍 坐标(1147,572) 【文字定位】 /TT1 12磅 【选择字体】 (空格) 【绘制文字】【文字结束】</span><br><span class="line">【文字开始】 缩放比例1倍 坐标(1060,572) 【文字定位】 /TT1 12磅 【选择字体】 [ (w) 间距24 (or) 间距-84 (l) 间距-24 (d) ] 【绘制文字】【文字结束】</span><br></pre></td></tr></table></figure><p>我们不难想象这是一种刻板的机械动作，计算机控制了一支笔，不断修改笔触的位置和大小，在数字纸张上画下内容。因此，用“打印”来形容计算机处理pdf文件内容的过程最合适不过。</p><p><br> <br></p><h1 id="三、为什么word的格式容易走样？"><a href="#三、为什么word的格式容易走样？" class="headerlink" title="三、为什么word的格式容易走样？"></a>三、为什么word的格式容易走样？</h1><p>了解了实现原理，解释起来就简单多了，word的标记语言尽管十分方便，可以随意修改，复制，变换；但是这也留了很大的漏洞，比如Times字体究竟长什么样，我这里找不到Times模版怎么办？又比如居中是怎样居中，居中的参考系是什么？这些问题都留给word文档处理软件来处理，这就需要不同的word文档处理软件统一标准，但是这又谈何容易，微软一家的word软件在不同版本情况下处理同一个问题的解决方法都是不同的。。。-_-||</p><p><br> <br></p><h1 id="四、为什么正式场合更多使用pdf？"><a href="#四、为什么正式场合更多使用pdf？" class="headerlink" title="四、为什么正式场合更多使用pdf？"></a>四、为什么正式场合更多使用pdf？</h1><p>答：pdf样式不容易变化，而且方便直接进行实体打印。</p><p>所以下次交简历的时候尽量不要发一份word给HR了，鬼知道HR用的是哪一年版本的word！！！（开玩笑的啦-.-）</p><p><br> <br></p><h1 id="五、链接资源"><a href="#五、链接资源" class="headerlink" title="五、链接资源"></a>五、链接资源</h1><p>我的这篇博客主要对下面这篇博客总结，有些更加详细的问题和解释内容并没有提及，所以有兴趣的话可以进入下面这篇博客深入学习。在此表示感谢。（侵删！！！）</p><p><a href="https://baijiahao.baidu.com/s?id=1613317718725473046&amp;wfr=spider&amp;for=pc&amp;isFailFlag=1" target="_blank" rel="noopener">为什么 PDF 是最好的「文件格式」｜ 科普</a></p><p><br> <br> <br> <br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习工作中，word的格式排版确实让人伤脑筋。而说到word，则不得不提在正式场合更多使用的pdf格式。正巧前几天看到了一遍关于这个的博客写得很好，我这里简单总结一下，比较一下两者的特点和不同，两者的格式转换为什么这么困难，以及为什么正式场合更多使用pdf而不是word。&lt;/p&gt;
    
    </summary>
    
      <category term="技术杂谈" scheme="https://ultronxr.xyz/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="word" scheme="https://ultronxr.xyz/tags/word/"/>
    
      <category term="pdf" scheme="https://ultronxr.xyz/tags/pdf/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://ultronxr.xyz/2018/12/20/test/"/>
    <id>https://ultronxr.xyz/2018/12/20/test/</id>
    <published>2018-12-20T02:48:17.000Z</published>
    <updated>2018-12-22T11:34:33.392Z</updated>
    
    <content type="html"><![CDATA[<p>—这里是文章摘要—<br>这是该博客对于Hexo的测试页面。</p><a id="more"></a><h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><p>正文正文正文正文正文正文正文<br>正文正文正文正文正文正文正文<br>正文正文正文正文正文正文正文<br>正文正文正文正文正文正文正文</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C测试</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"HelloWorld"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C++测试</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"HelloWorld"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java测试</span></span><br><span class="line">System.out.println(<span class="string">"HelloWorld"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python测试</span></span><br><span class="line"><span class="keyword">import</span> math;</span><br><span class="line">print(<span class="string">"HelloWorld"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;—这里是文章摘要—&lt;br&gt;这是该博客对于Hexo的测试页面。&lt;/p&gt;
    
    </summary>
    
      <category term="测试" scheme="https://ultronxr.xyz/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="test" scheme="https://ultronxr.xyz/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Java中的try catch finally语法（坑）</title>
    <link href="https://ultronxr.xyz/2018/11/12/Try_catch_finally%20statement%20in%20java/"/>
    <id>https://ultronxr.xyz/2018/11/12/Try_catch_finally statement in java/</id>
    <published>2018-11-11T16:00:00.000Z</published>
    <updated>2018-12-22T10:49:34.095Z</updated>
    
    <content type="html"><![CDATA[<p>以前都没有仔细注意过try catch finally的用途，只知道在代码里try catch一下，然后println一下异常提示。<br>今天在做项目的时候被这个坑了好久，感叹自己学艺不精！下面讲一下里面的心路历程。</p><a id="more"></a><h1 id="一、写这篇文章的起因"><a href="#一、写这篇文章的起因" class="headerlink" title="一、写这篇文章的起因"></a>一、写这篇文章的起因</h1><p><br></p><p>超级超级低级的错误！！！</p><p>以前都没有仔细注意过try catch finally的用途，只知道在代码里try catch一下，然后println一下异常提示。</p><p>今天在做项目的时候被这个坑了好久，感叹自己学艺不精！下面讲一下里面的心路历程。</p><p>直接上代码（第一版的代码）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 这是一个线程中的execute方法实例，用来在rabbitmq里注册一个consumer消费者，每隔一定时间去取消息队列中的信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferExecutor</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ......</span><br><span class="line">            </span><br><span class="line">            Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel);</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                channel.basicConsume(queueName, autoAck, consumer);</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            MyRabbitMQ.closeChannelAndConnection(channel, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码完全可以正常运行，甚至一段相当长的时间内都看不出异常。。。</p><p>直到我用rabbitmq自带的可视化界面看了一下我的队列，发现我的队列绑定着上百个consumer（要不是IDEA报错我可能现在还没发现）。</p><p>原因是 <code>channel.basicConsume()</code> 方法并不是单单从队列中取出信息消费一次（重点），而是注册一个消费者consumer持续地进行消费，直至channel关闭或手动删除consumer。</p><p><br> <br></p><p>修改了，然后就有了第二版代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferExecutor</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ......</span><br><span class="line">            </span><br><span class="line">            Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel);</span><br><span class="line">            channel.basicConsume(queueName, autoAck, consumer); <span class="comment">//不是说注册消费者吗，那我就只注册一个呗。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            MyRabbitMQ.closeChannelAndConnection(channel, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后呢，代码直接就不能用了，不是说不能运行，而是publish新的消息没有消费者去处理，然后发现在队列上完全没有消费者绑着。</p><p>调了很久，一直找不出错误，一度怀疑是 <code>Executors.newFixedThreadPool(10)</code> 的线程池有问题。。。</p><p>然后这里把代码简化了就能一眼看出来了，try运行完了没有抛出异常直接就转到finally里的代码了，线程在运行，却关闭了消息队列的连接，当然没法消费了（再次重点）。</p><p><br> <br> <br></p><h1 id="二、借此机会摘记一下try-catch-finally的用法和运行顺序"><a href="#二、借此机会摘记一下try-catch-finally的用法和运行顺序" class="headerlink" title="二、借此机会摘记一下try catch finally的用法和运行顺序"></a>二、借此机会摘记一下try catch finally的用法和运行顺序</h1><p><br></p><p>据说有些公司拿这个当过面试和笔试题（别人博客上看到的）。</p><p>考运行顺序一般是和return exit这些函数放在一起考的，详见下面的摘记或博客（这里我列了一些我看到的比较好的博客）：</p><p><a href="https://blog.csdn.net/u013309870/article/details/73498860" target="_blank" rel="noopener">Java异常机制–try catch finally 执行顺序详解</a></p><p><a href="https://blog.csdn.net/aaoxue/article/details/8535754" target="_blank" rel="noopener">Java异常捕获之try-catch-finally-return的执行顺序</a></p><p style="font-size:6px">以后会填坑的（小声逼逼..）</p><p><br> <br> <br></p><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p><br></p><p>学艺不精，继续努力！</p><p><br> <br> <br> <br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前都没有仔细注意过try catch finally的用途，只知道在代码里try catch一下，然后println一下异常提示。&lt;br&gt;今天在做项目的时候被这个坑了好久，感叹自己学艺不精！下面讲一下里面的心路历程。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://ultronxr.xyz/categories/java/"/>
    
      <category term="problems" scheme="https://ultronxr.xyz/categories/java/problems/"/>
    
    
      <category term="java" scheme="https://ultronxr.xyz/tags/java/"/>
    
      <category term="problems" scheme="https://ultronxr.xyz/tags/problems/"/>
    
  </entry>
  
  <entry>
    <title>使用IDEA创建maven web项目</title>
    <link href="https://ultronxr.xyz/2018/10/01/Create%20maven%20web%20project%20using%20IDEA/"/>
    <id>https://ultronxr.xyz/2018/10/01/Create maven web project using IDEA/</id>
    <published>2018-09-30T16:00:00.000Z</published>
    <updated>2018-12-22T10:49:51.604Z</updated>
    
    <content type="html"><![CDATA[<p>使用IDEA创建maven web项目</p><a id="more"></a><h1 id="一、新建项目"><a href="#一、新建项目" class="headerlink" title="一、新建项目"></a>一、新建项目</h1><p><br></p><p>1.在刚打开的IDEA页面点击 Create New Project 按钮 或者 在项目界面点击菜单中的 File–New–Project 选项；</p><p>2.在弹出的新建项目对话框中选择左边的Maven选项，在右侧列表中勾上Create from archetype复选框，选择maven-archetype-webapp选项，点击Next按钮进入下一步；</p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\00.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>3.填写GroupId和ArtifactId，第一个是组织名称，第二个是项目标识名，两者意义的详细介绍自行百度，第三个Version 1.0-SNAPSHOT代表项目是测试版本，不是稳定版本，点击Next按钮进入下一步；</p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\01.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>4.配置maven页面，可以使用IDEA自带的，也可以选择自己安装的maven。我这里是自己安装的maven，第一个Maven home directory选择maven的安装路径，第二个User settings file打上Override的勾，然后选择maven安装路径中conf文件夹下的settings.xml配置文件，其他的不用改，点击Next按钮进入下一步；</p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\02.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>5.这里就改一下项目所在的路径就可以了，基本不变，点击Finish即可；</p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\03.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p><br></p><h1 id="二、配置项目"><a href="#二、配置项目" class="headerlink" title="二、配置项目"></a>二、配置项目</h1><p><br></p><p>1.新建的项目的文件树如下：</p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\04.png" align="absmiddle" width="50%" height="50%"></div> <br></p><p>2.在main文件夹内新建两个并列的文件夹，一个是java，一个是resources。建好后点击菜单栏右上角的项目结构按钮，选择左边的Modules选项卡，在右边把java文件夹标记为Sources，把resources文件夹标记为Resources；</p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\05.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\06.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>3.点击Apply后切换到Facets选项卡，点击右边的加号，选择Web，在弹出来的对话框中选择你的项目，点击OK；</p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\07.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\08.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>4.点击OK后会自动跳转到Modules选项卡，切回到Facets选项卡，选中刚刚新建的Web，在右侧Deployment Description中，选中内容点击小铅笔图标，修改Path为当前项目的web.xml文件路径；</p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\09.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\10.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\11.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>5.然后修改Web Resource Directories，选中内容点击小铅笔图标修改为当前项目的webapp目录，修改好后点击Apply；</p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\12.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\13.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p>6.切换到Artifacts选项卡，点击右边的加号，选择Web Application: Exploded，选择From Modules，在弹出来的对话框中选择当前项目，点击OK，完成后如下图；</p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\14.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\15.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\16.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>7.点击Apply应用修改，点击OK关闭窗口，点击菜单栏右上方一个小锤子右边的Add Configuration按钮，在弹出来的对话框里点击加号，依次选择Tomcat Server – Local；</p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\17.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>8.在右侧选择Deployment选项卡，点击右侧的加号，选择Artifact，完成后修改Application context为项目名（也可以是别的名称，这个是用来指定url中根目录下具体路径的）；</p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\18.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\19.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>9.切换到Server选项卡，自上往下依次修改：</p><p>Name 随便写</p><p>Application server 选一个tomcat，如何配置tomcat略</p><p>Open browser中的After launch前面的勾勾上就会在运行项目时自动打开浏览器，浏览器选择Chrome</p><p>On ‘Update’ action 和 On frame deactivation两个选项都改成 Update classes and resources，这样修改代码就会自动更新到tomcat里而不用重启服务器</p><p>下面的HTTP端口按照自己的配置因人而异</p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\20.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>10.点击Apply和OK后，点击右上方的运行按钮，就是一个向右的小三角，如果等待一会后浏览器打开跳转到了项目页面，显示了Hello World（index.jsp中的内容），说明配置成功。点击IDEA右上方红色的小方块停止运行。</p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\21.png" align="absmiddle" width="50%" height="50%"></div> <br></p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\22.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\23.png" align="absmiddle" width="50%" height="50%"></div> <br></p><p><br><br></p><h1 id="三、导出项目成war包"><a href="#三、导出项目成war包" class="headerlink" title="三、导出项目成war包"></a>三、导出项目成war包</h1><p><br></p><p>1.打开Project Structure对话框，切换到Artifacts选项卡，点击加号新建，选择Application Web: Archive，如果配置了前面的Application Web: exploded的话，这里会有 ‘For 你的项目名称’  的选项，直接点击这个，Output Directory可以修改成别的文件夹，点击Apply和OK退出；</p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\24.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>2.点击菜单栏里的Build按钮，选择Build Artifacts选项，在弹出来的选项中选择后缀为 :war 的选项（没有exploded 的选项），点击Build就会生成war包了。</p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\25.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\26.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p><div><img src="\assets\images\2018-10-01-Create maven web project using IDEA\27.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p><br><br></p><h1 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h1><p><br></p><p>1.<a href="https://blog.csdn.net/weixin_38410429/article/details/71773667" target="_blank" rel="noopener">idea2017创建maven web项目</a></p><p>2.<a href="https://www.cnblogs.com/1314wamm/p/7475771.html" target="_blank" rel="noopener">IDEA中创建maven web项目的详细部署</a></p><p>3.<a href="https://blog.csdn.net/u011291072/article/details/53232115" target="_blank" rel="noopener">idea将项目导出为war包</a></p><p><br> <br> <br> <br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用IDEA创建maven web项目&lt;/p&gt;
    
    </summary>
    
      <category term="javaweb" scheme="https://ultronxr.xyz/categories/javaweb/"/>
    
    
      <category term="java" scheme="https://ultronxr.xyz/tags/java/"/>
    
      <category term="javaweb" scheme="https://ultronxr.xyz/tags/javaweb/"/>
    
      <category term="maven" scheme="https://ultronxr.xyz/tags/maven/"/>
    
      <category term="IDEA" scheme="https://ultronxr.xyz/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>IDEA中编译器与项目的java版本不同导致编译失败的解决办法</title>
    <link href="https://ultronxr.xyz/2018/10/01/Compiling%20failure%20due%20to%20the%20differences%20between%20project%20and%20java%20complier/"/>
    <id>https://ultronxr.xyz/2018/10/01/Compiling failure due to the differences between project and java complier/</id>
    <published>2018-09-30T16:00:00.000Z</published>
    <updated>2018-12-22T10:49:55.161Z</updated>
    
    <content type="html"><![CDATA[<p>IDEA中编译器与项目的java版本不同导致编译失败的解决办法</p><a id="more"></a><h1 id="一、错误征兆"><a href="#一、错误征兆" class="headerlink" title="一、错误征兆"></a>一、错误征兆</h1><p><br></p><p>IDEA中编译项目有时会出现以下几种报错情况，基本上是因为编译器和项目的java版本不匹配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Override is not allowed when implementing interface method</span><br><span class="line">//Override不能用</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error:java: Compilation failed: internal java compiler error </span><br><span class="line">//编译器出错</span><br></pre></td></tr></table></figure><p><br><br></p><h1 id="二、解决办法"><a href="#二、解决办法" class="headerlink" title="二、解决办法"></a>二、解决办法</h1><p><br></p><p>1.先打开项目结构Project Structure对话框，选择Project选项卡，检查Project SDK和Project language level是否匹配，1.8的JDK应该对应于8的language level；</p><p><div><img src="\assets\images\2018-10-01-Compiling failure due to the differences between project and java complier\00.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>2.切换到Modules选项卡，检查language level是否匹配和上一步中的language level匹配；</p><p><div><img src="\assets\images\2018-10-01-Compiling failure due to the differences between project and java complier\01.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>3.打开IDEA系统设置对话框，定位到 Build,Execution,Deployment –&gt; Compiler –&gt; Java Compiler 选项卡，修改右侧的Module中的Target bytecode version，使其匹配当前的JDK版本；</p><p><div><img src="\assets\images\2018-10-01-Compiling failure due to the differences between project and java complier\02.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>4.因为我这里用的是1.8的JDK，所以其他的language level都是设置成8的，其他版本的JDK应该设置成相对应的数值。</p><p><br> <br></p><h1 id="三、参考资料"><a href="#三、参考资料" class="headerlink" title="三、参考资料"></a>三、参考资料</h1><p><br></p><p>1.<a href="https://blog.csdn.net/shenya2/article/details/50460447" target="_blank" rel="noopener">idea @Override is not allowed when implementing interface method解决办法</a></p><p>2.<a href="https://blog.csdn.net/jdjdndhj/article/details/70256989" target="_blank" rel="noopener">Error:java: Compilation failed: internal java compiler error 解决办法</a></p><p><br> <br> <br> <br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IDEA中编译器与项目的java版本不同导致编译失败的解决办法&lt;/p&gt;
    
    </summary>
    
      <category term="IDEA" scheme="https://ultronxr.xyz/categories/IDEA/"/>
    
    
      <category term="java" scheme="https://ultronxr.xyz/tags/java/"/>
    
      <category term="IDEA" scheme="https://ultronxr.xyz/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>在Windows上安装maven，并且在eclipse和IDEA中配置maven</title>
    <link href="https://ultronxr.xyz/2018/10/01/How%20to%20install%20maven%20on%20windows%20and%20the%20setup%20of%20maven%20in%20eclipse%20and%20IDEA/"/>
    <id>https://ultronxr.xyz/2018/10/01/How to install maven on windows and the setup of maven in eclipse and IDEA/</id>
    <published>2018-09-30T16:00:00.000Z</published>
    <updated>2018-12-22T10:49:47.508Z</updated>
    
    <content type="html"><![CDATA[<p>在Windows上安装maven，并且在eclipse和IDEA中配置maven</p><a id="more"></a><h1 id="一、下载和配置maven"><a href="#一、下载和配置maven" class="headerlink" title="一、下载和配置maven"></a>一、下载和配置maven</h1><p><br></p><h2 id="1-下载maven压缩包"><a href="#1-下载maven压缩包" class="headerlink" title="1.下载maven压缩包"></a>1.下载maven压缩包</h2><p>进入Apache maven<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">下载页面</a>，选择Windows对应的maven压缩包，点击下载。如果有版本要求在下面的历史版本中找。</p><p><div><img src="\assets\images\2018-10-01-How to install maven on windows and the setup of maven in eclipse and IDEA\00.png" align="absmiddle" width="100%" height="100%"></div> <br></p><h2 id="2-配置maven"><a href="#2-配置maven" class="headerlink" title="2.配置maven"></a>2.配置maven</h2><p>1) 配置前请先确认你正确安装了Java的jdk；</p><p>2) 把下载的压缩包解压到某路径内，我的是 <code>D:\JAVA\apache-maven-3.5.4</code> ；</p><p><div><img src="\assets\images\2018-10-01-How to install maven on windows and the setup of maven in eclipse and IDEA\01.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>3) 修改maven配置：</p><p>打开 <code>conf</code> 文件夹内的 <code>settings.xml</code> 文件，按照下面修改：</p><p>在图示位置加上 下面这一段代码，作用是指定路径作为本地仓库所在的文件夹，你也可以指定其他的路径文件夹（默认的仓库是是C盘当前用户文件夹内的.m2文件夹，修改到别的位置防止C盘占用太多）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;D:\JAVA\ApachemavenRepository&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure><p><div><img src="\assets\images\2018-10-01-How to install maven on windows and the setup of maven in eclipse and IDEA\02.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>继续在图片所示位置加上以下代码，注意要加在两个<code>&lt;mirrors&gt;`</code>`标签之间，代码的作用是把阿里云maven仓库作为远程仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;   </span><br><span class="line">  &lt;id&gt;alimaven&lt;/id&gt;   </span><br><span class="line">  &lt;name&gt;aliyun maven&lt;/name&gt;   </span><br><span class="line">  &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;   </span><br><span class="line">  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;           </span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><p><div><img src="\assets\images\2018-10-01-How to install maven on windows and the setup of maven in eclipse and IDEA\03.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>保存后关闭文件。</p><p><br></p><p>4) 接下来配置环境变量：</p><p>在 <code>系统变量</code> 中新建一个变量，名称为 <code>MAVEN_HOME</code> ，值为 <code>D:\JAVA\apache-maven-3.5.4</code> （你解压maven的路径）；</p><p><div><img src="\assets\images\2018-10-01-How to install maven on windows and the setup of maven in eclipse and IDEA\04.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>在 <code>系统变量</code> 的 <code>PATH</code> 变量里新加一个值 <code>%MAVEN_HOME%\bin</code> ；</p><p>保存退出。</p><p><br></p><p>5) 验证maven是否安装成功：</p><p>打开cmd窗口，输入 <code>mvn -v</code> 命令，如果输出了maven的版本信息，说明安装成功，如下图所示。</p><p><div><img src="\assets\images\2018-10-01-How to install maven on windows and the setup of maven in eclipse and IDEA\05.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p><br> <br> <br></p><h1 id="二、在eclipse中配置maven"><a href="#二、在eclipse中配置maven" class="headerlink" title="二、在eclipse中配置maven"></a>二、在eclipse中配置maven</h1><p><br></p><p>1.点击菜单栏中的Windows选项，打开Preferences选项卡;</p><p>2.找到Maven选项里的Installations选项：</p><p><div><img src="\assets\images\2018-10-01-How to install maven on windows and the setup of maven in eclipse and IDEA\06.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p>3.点击右侧的Add按钮，在弹出来的对话框中点击Diretory按钮，选择解压maven的目录；</p><p><div><img src="\assets\images\2018-10-01-How to install maven on windows and the setup of maven in eclipse and IDEA\07.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p><div><img src="\assets\images\2018-10-01-How to install maven on windows and the setup of maven in eclipse and IDEA\08.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p>4.选好后点击Finish按钮回到开始的选项处，发现列表中多了一条我们自定义的maven，把这条maven前面的复选框勾上，点击Apply按钮应用更改。</p><p><div><img src="\assets\images\2018-10-01-How to install maven on windows and the setup of maven in eclipse and IDEA\09.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p>5.选择左边的User Settings选项；</p><p>6.点击第一个Browse按钮，选择解压maven路径下的conf文件夹里的settings.xml文件；</p><p><div><img src="\assets\images\2018-10-01-How to install maven on windows and the setup of maven in eclipse and IDEA\10.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p><div><img src="\assets\images\2018-10-01-How to install maven on windows and the setup of maven in eclipse and IDEA\11.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p>7.上一步完成后，你会发现第三个Local Repository处自动变成了你的maven配置文件里指定的本地仓库的路径；</p><p><div><img src="\assets\images\2018-10-01-How to install maven on windows and the setup of maven in eclipse and IDEA\12.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p>8.点击Apply和Apply and Close应用后退出即可。</p><p><br> <br> <br></p><h1 id="三、在IDEA中配置maven"><a href="#三、在IDEA中配置maven" class="headerlink" title="三、在IDEA中配置maven"></a>三、在IDEA中配置maven</h1><p><br></p><p>1.点击菜单中的File选项，选择Settings；</p><p>2.定位到左边选项列表中的 Build,Execution,Deployment –&gt; Build Tools –&gt; Maven 选项；</p><p><div><img src="\assets\images\2018-10-01-How to install maven on windows and the setup of maven in eclipse and IDEA\13.png" align="absmiddle" width="60%" height="40%"></div> <br></p><p>3.点击Maven选项，在右边的 Maven home directory 处选择解压maven的路径，</p><p>在User settings file后面的Override勾勾打上，选择解压maven路径中conf文件夹内的settings.xml文件，</p><p>选择完成后，下面的Local repository会自动修改为配置文件中本地仓库的路径；</p><p>点击Apply保存修改；</p><p><div><img src="\assets\images\2018-10-01-How to install maven on windows and the setup of maven in eclipse and IDEA\14.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>4.点击Maven选项下的Importing选项，把 Importing Maven projects automatically 前面的勾勾上，点击Apply保存修改；</p><p><div><img src="\assets\images\2018-10-01-How to install maven on windows and the setup of maven in eclipse and IDEA\15.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>5.点击Maven选项下的Repositoroes选项，选中刚才我们自己设置的maven，点击右侧Update按钮更新本地仓库。</p><p><div><img src="\assets\images\2018-10-01-How to install maven on windows and the setup of maven in eclipse and IDEA\16.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>6.至此配置完成。</p><p><br> <br></p><h1 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h1><p><br></p><p>1.apache maven<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">下载页面</a></p><p>2.<a href="https://www.cnblogs.com/pengyan-9826/p/7767070.html" target="_blank" rel="noopener">Eclipse配置maven环境</a></p><p>3.<a href="https://blog.csdn.net/westos_linux/article/details/78968012" target="_blank" rel="noopener">如何使用IntelliJ IDEA 配置Maven</a></p><p><br> <br> <br> <br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Windows上安装maven，并且在eclipse和IDEA中配置maven&lt;/p&gt;
    
    </summary>
    
      <category term="javaweb" scheme="https://ultronxr.xyz/categories/javaweb/"/>
    
    
      <category term="java" scheme="https://ultronxr.xyz/tags/java/"/>
    
      <category term="javaweb" scheme="https://ultronxr.xyz/tags/javaweb/"/>
    
      <category term="maven" scheme="https://ultronxr.xyz/tags/maven/"/>
    
      <category term="IDEA" scheme="https://ultronxr.xyz/tags/IDEA/"/>
    
      <category term="eclipse" scheme="https://ultronxr.xyz/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>使用Photoshop创建4寸照</title>
    <link href="https://ultronxr.xyz/2018/09/22/How%20to%20create%20a%204%20inch%20photo%20with%20photoshop/"/>
    <id>https://ultronxr.xyz/2018/09/22/How to create a 4 inch photo with photoshop/</id>
    <published>2018-09-21T16:00:00.000Z</published>
    <updated>2018-12-22T11:35:05.331Z</updated>
    
    <content type="html"><![CDATA[<p>使用Photoshop创建4寸照</p><a id="more"></a><h1 id="一、处理方法"><a href="#一、处理方法" class="headerlink" title="一、处理方法"></a>一、处理方法</h1><p><br></p><p>1.新建4寸（宽度：7.6cm 高度：10cm 分辨率：300dpi像素/英寸）大小的白色背景画布；</p><p>2.打开照片，拖进背景文件里，按住shift键等比例调整大小，完全盖住背景画布；</p><p>3.处理照片图层，锐化什么的。。。</p><p>4.右键照片图层，向下合并，与背景成为同一个图层；</p><p>5.保存即可。</p><p><br> <br></p><h1 id="二、参考资料"><a href="#二、参考资料" class="headerlink" title="二、参考资料"></a>二、参考资料</h1><p><br></p><p><a href="https://zhidao.baidu.com/question/316086144.html" target="_blank" rel="noopener">怎么用adobe photoshop做4寸照片</a></p><p><br> <br> <br> <br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Photoshop创建4寸照&lt;/p&gt;
    
    </summary>
    
      <category term="photoshop" scheme="https://ultronxr.xyz/categories/photoshop/"/>
    
    
      <category term="photoshop" scheme="https://ultronxr.xyz/tags/photoshop/"/>
    
  </entry>
  
  <entry>
    <title>Windows下 Java JDK 和 Tomcat 的安装配置</title>
    <link href="https://ultronxr.xyz/2018/09/17/Java%20jdk%20setting%20up%20and%20tomcat%20installation/"/>
    <id>https://ultronxr.xyz/2018/09/17/Java jdk setting up and tomcat installation/</id>
    <published>2018-09-16T16:00:00.000Z</published>
    <updated>2018-12-22T11:33:34.896Z</updated>
    
    <content type="html"><![CDATA[<p>Windows下 Java JDK 和 Tomcat 的安装配置</p><a id="more"></a><h1 id="一、安装配置JDK"><a href="#一、安装配置JDK" class="headerlink" title="一、安装配置JDK"></a>一、安装配置JDK</h1><h2 id="1-安装配置JDK"><a href="#1-安装配置JDK" class="headerlink" title="1.安装配置JDK"></a>1.安装配置JDK</h2><p>JDK压缩包下载解压到一个文件夹里，然后编辑系统环境变量</p><ol><li>系统变量→新建 <code>JAVA_HOME</code> 变量，内容填写JDK解压后的根目录，如 <code>D:\JAVA\jdk1.8.0_131</code> ；<br><br> <br></li><li>系统变量→找到 <code>Path</code> 变量，添加 <code>%JAVA_HOME%\bin</code> 和 <code>%JAVA_HOME%\jre\bin</code> 两个变量， <br><br>有些系统可能不支持 %JAVA_HOME% 这样的格式，就添加带绝对路径的 <code>D:\JAVA\jdk1.8.0_131\bin</code> 和 <code>D:\JAVA\jdk1.8.0_131\jre\bin</code> 这样的变量；<br><br> <br></li><li>系统变量→新建 <code>CLASSPATH</code> 变量，内容填写 <code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code> 。</li></ol><h2 id="2-检验JDK是否安装成功"><a href="#2-检验JDK是否安装成功" class="headerlink" title="2.检验JDK是否安装成功"></a>2.检验JDK是否安装成功</h2><p>打开 cmd 输入 <code>java</code> <code>java -version</code> <code>javac</code> 三个命令，如果都有输出提示如何使用命令或者显示java版本则安装成功，如果输出显示不是内部或外部命令，也不是可运行的程序<br>或批处理文件什么的就是没有成功。</p><p><br> <br></p><h1 id="二、Windows下安装和配置Tomcat"><a href="#二、Windows下安装和配置Tomcat" class="headerlink" title="二、Windows下安装和配置Tomcat"></a>二、Windows下安装和配置Tomcat</h1><h2 id="1-下载解压安装包"><a href="#1-下载解压安装包" class="headerlink" title="1.下载解压安装包"></a>1.下载解压安装包</h2><p>进入<a href="https://tomcat.apache.org/" target="_blank" rel="noopener">Tomcat官网</a>，在页面左边Download处选择合适的版本，点击进入下载页面，按照系统下载32位或者64位的压缩包；</p><p><div><img src="\assets\images\2018-09-17-Java jdk setting up and tomcat installation\00.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p><div><img src="\assets\images\2018-09-17-Java jdk setting up and tomcat installation\01.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>把压缩包解压到合适的路径，我的路径是 <code>C:\Program Files\Apache Software Foundation\tomcat7.0.90</code> ，解压出来的文件截图：</p><p><div><img src="\assets\images\2018-09-17-Java jdk setting up and tomcat installation\02.png" align="absmiddle" width="80%" height="80%"></div> <br></p><h2 id="2-配置安装Tomcat"><a href="#2-配置安装Tomcat" class="headerlink" title="2.配置安装Tomcat"></a>2.配置安装Tomcat</h2><p>1) 在系统环境变量里的分别新建两个变量 <code>CATALINA_BASE</code> 和 <code>CATALINA_HOME</code> <br><br>   里面填写的内容都是Tomcat的解压目录，我的是 <code>C:\Program Files\Apache Software Foundation\tomcat7.0.90</code><br><br> <br></p><p>2) 在系统环境变量Path中添加两条内容：<br><br>    <code>%CATALINA_HOME%\lib</code>    <code>%CATALINA_HOME%\bin</code><br><br> <br></p><p>3) 打开cmd进入 <code>C:\Program Files\Apache Software Foundation\tomcat7.0.90\bin</code> 目录，<br><br>    执行 <code>service.bat install</code> 命令安装Tomcat服务（卸载Tomcat服务的命令： <code>service.bat remove</code> ）。 <br><br>如果显示 The service ‘Tomcat x’ has been installed. 就是安装完成了。<br><br> <br></p><p>4) 安装完成后打开系统服务管理，找到Tomcat服务，手动打开即可，也可以设置自动启动等选项。</p><h2 id="3-添加Tomcat管理员用户"><a href="#3-添加Tomcat管理员用户" class="headerlink" title="3.添加Tomcat管理员用户"></a>3.添加Tomcat管理员用户</h2><p>1) 进入 <code>C:\Program Files\Apache Software Foundation\tomcat7.0.90\conf</code> 目录，打开 <code>tomcat-users.xml</code> 文件；</p><p>2) 在 <code>&lt;tomcat-users&gt;</code> 和 <code>&lt;/tomcat-users&gt;</code> 之间添加以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;role rolename=&quot;manager-gui&quot;/&gt;</span><br><span class="line">&lt;user username=&quot;example1&quot; password=&quot;example1&quot; roles=&quot;manager-gui&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;admin-gui&quot;/&gt;</span><br><span class="line">&lt;user username=&quot;example2&quot; password=&quot;example2&quot; roles=&quot;admin-gui&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>两个example1和example2是两组用户名和密码，按需要修改。</p><p>3) 修改完成后保存退出，重新启动Tomcat服务（重要！！！）。</p><h2 id="4-验证Tomcat是否安装成功"><a href="#4-验证Tomcat是否安装成功" class="headerlink" title="4.验证Tomcat是否安装成功"></a>4.验证Tomcat是否安装成功</h2><p>启动Tomcat服务后（如果不启动会显示网址无法访问），使用浏览器打开 <code>http://localhost:8080/</code> <a href="http://localhost:8080/" target="_blank" rel="noopener">网址</a>，如果显示下图则安装成功：</p><p><div><img src="\assets\images\2018-09-17-Java jdk setting up and tomcat installation\03.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>然后点击右边的三个按钮。</p><p><div><img src="\assets\images\2018-09-17-Java jdk setting up and tomcat installation\04.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>前两个按钮用example1的那组用户名密码登录，最后一个用example2的那组用户名密码登录，如果显示类似的界面则说明管理员账户可以正常使用。</p><p><div><img src="\assets\images\2018-09-17-Java jdk setting up and tomcat installation\05.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>如果显示这样的界面则说明管理员账户设置失败，按照页面提示重新设置即可（设置完了别忘了重启Tomcat服务！）。</p><p><div><img src="\assets\images\2018-09-17-Java jdk setting up and tomcat installation\06.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>最后标注一点，如果使用eclipse或者IDEA编译器运行JavaWeb项目，要先把Tomcat服务关闭，否则会报端口占用的错。除非自己修改Tomcat的端口。</p><p><br> <br></p><h1 id="三、参考资料"><a href="#三、参考资料" class="headerlink" title="三、参考资料"></a>三、参考资料</h1><ul><li><a href="https://tomcat.apache.org/" target="_blank" rel="noopener">Tomcat官网</a></li><li><a href="https://blog.csdn.net/zs520ct/article/details/78015779" target="_blank" rel="noopener">windows10配置jdk和Tomcat</a></li></ul><p><br> <br> <br> <br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows下 Java JDK 和 Tomcat 的安装配置&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://ultronxr.xyz/categories/java/"/>
    
    
      <category term="java" scheme="https://ultronxr.xyz/tags/java/"/>
    
      <category term="jdk" scheme="https://ultronxr.xyz/tags/jdk/"/>
    
      <category term="tomcat" scheme="https://ultronxr.xyz/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Windows下Redis的安装与设置</title>
    <link href="https://ultronxr.xyz/2018/08/15/The%20installation%20and%20setup%20of%20Redis%20on%20Windows/"/>
    <id>https://ultronxr.xyz/2018/08/15/The installation and setup of Redis on Windows/</id>
    <published>2018-08-14T16:00:00.000Z</published>
    <updated>2018-12-22T10:50:05.755Z</updated>
    
    <content type="html"><![CDATA[<p>Windows下Redis的安装与设置</p><a id="more"></a><h1 id="一、Redis简介"><a href="#一、Redis简介" class="headerlink" title="一、Redis简介"></a>一、Redis简介</h1><p>Redis 是完全开源免费，遵守 BSD 协议的一个高性能的 key-value 数据库。</p><p>Redis 的特点：</p><ul><li>性能极高;</li><li>提供 key-value, list, set, zset, hash 等数据结构的存储;</li><li>支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作;</li><li>所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行;</li></ul><p><br> <br></p><h1 id="二、Windows下安装和配置Redis"><a href="#二、Windows下安装和配置Redis" class="headerlink" title="二、Windows下安装和配置Redis"></a>二、Windows下安装和配置Redis</h1><h2 id="1-安装前的注意事项"><a href="#1-安装前的注意事项" class="headerlink" title="1.安装前的注意事项"></a>1.安装前的注意事项</h2><ul><li>仅可在 Windows x64位 上安装</li><li>安装前请升级Windows上的 .NET Framework 至4.0版本以上，否则会安装程序会自动结束无法安装，可以在cmd中输入 <code>dir %WINDIR%\Microsoft.Net\Framework\v* /O:-N /B</code> 命令查看当前安装的版本</li></ul><p><br></p><h2 id="2-下载安装包"><a href="#2-下载安装包" class="headerlink" title="2.下载安装包"></a>2.下载安装包</h2><p>链接：<a href="https://github.com/MicrosoftArchive/redis/releases/" target="_blank" rel="noopener">Redis在GitHub上的项目网址</a></p><p><div><img src="\assets\images\2018-08-15-The installation and setup of Redis on Windows\01.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>可以选择msi安装包或者zip压缩包下载，装好的内容是一样的，随意选。我这里选择msi安装包下载。</p><p><br></p><h2 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h2><p>打开安装包，点击 Next 进入下一步；</p><p><div><img src="\assets\images\2018-08-15-The installation and setup of Redis on Windows\02.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p>同意用户许可协议，点击 Next 进入下一步；</p><p><div><img src="\assets\images\2018-08-15-The installation and setup of Redis on Windows\03.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p>选择安装路径，同时选中下面的复选框，把安装目录添加到系统环境变量；</p><p><div><img src="\assets\images\2018-08-15-The installation and setup of Redis on Windows\04.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p>设置端口，这里保持默认，选中下面的复选框，添加防火墙例外，保证外部可以正常访问Redis服务；</p><p><div><img src="\assets\images\2018-08-15-The installation and setup of Redis on Windows\05.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p>设置最大占用空间限制，可以不设置，我这里设置了10G的大小；</p><p><div><img src="\assets\images\2018-08-15-The installation and setup of Redis on Windows\06.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p>点击 Install 安装，Win10和Win7上会要求提供管理员权限，选 是 ；</p><p><div><img src="\assets\images\2018-08-15-The installation and setup of Redis on Windows\07.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p><div><img src="\assets\images\2018-08-15-The installation and setup of Redis on Windows\08.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p>等待安装完成，点击 Finish 退出安装程序；</p><p><div><img src="\assets\images\2018-08-15-The installation and setup of Redis on Windows\09.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p>下面是安装完成后的文件列表，同时系统环境变量 PATH 中会有安装目录的变量。</p><p><div><img src="\assets\images\2018-08-15-The installation and setup of Redis on Windows\10.png" align="absmiddle" width="100%" height="100%"></div> <br> <br></p><h2 id="4-配置"><a href="#4-配置" class="headerlink" title="4.配置"></a>4.配置</h2><p>进入安装目录，使用文本编辑器（推荐Notepad++或Sublime）打开 <code>redis.windows-service.conf</code> 文件，注意是有 service 的文件，不是另一个！</p><p><div><img src="\assets\images\2018-08-15-The installation and setup of Redis on Windows\11.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>打开之后找到 <code>requirepass</code> 所在的行，在下面另起一行，写入 <code>requirepass 123456</code> ，123456是redis的密码，可以自己设置；</p><p><div><img src="\assets\images\2018-08-15-The installation and setup of Redis on Windows\12.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p><div><img src="\assets\images\2018-08-15-The installation and setup of Redis on Windows\13.png" align="absmiddle" width="100%" height="100%"></div> <br></p><p>完成后保存文件退出。</p><p><br></p><p>依次 右键点击”我的电脑” - 打开”管理” - “服务和应用程序” - “服务”，在右侧找到名为 Redis 的服务项，查看是否已启动。没有启动的话手动启动它。如果已经启动的话请停止后重新启动（为了刷新密码验证设置）。</p><p><div><img src="\assets\images\2018-08-15-The installation and setup of Redis on Windows\14.png" align="absmiddle" width="100%" height="100%"></div> <br><br><br></p><h1 id="三、检查是否安装成功"><a href="#三、检查是否安装成功" class="headerlink" title="三、检查是否安装成功"></a>三、检查是否安装成功</h1><h2 id="1-进入Redis服务检验"><a href="#1-进入Redis服务检验" class="headerlink" title="1.进入Redis服务检验"></a>1.进入Redis服务检验</h2><p>打开cmd窗口，输入 <code>redis-cli</code> 回车，如果显示了本地地址和端口号，则说明Redis服务正常。</p><p><div><img src="\assets\images\2018-08-15-The installation and setup of Redis on Windows\15.png" align="absmiddle" width="60%" height="60%"></div> <br></p><h2 id="2-Redis读写检验"><a href="#2-Redis读写检验" class="headerlink" title="2.Redis读写检验"></a>2.Redis读写检验</h2><p>设置了密码之后，需要输入 <code>auth 123456</code> 使用密码来通过验证，显示 OK 则成功；</p><p><div><img src="\assets\images\2018-08-15-The installation and setup of Redis on Windows\16.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p>输入 <code>set testkey &quot;hello redis&quot;</code> 新增一个键值，再输入 <code>get testkey</code> 读取刚刚新建的键值，若能写入和读取则安装成功；</p><p><div><img src="\assets\images\2018-08-15-The installation and setup of Redis on Windows\17.png" align="absmiddle" width="60%" height="60%"></div> <br></p><p>输入 <code>del testkey</code> 删除键值；</p><p><br></p><p>输入 <code>exit</code> 退出Redis。</p><p><br> <br></p><h1 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h1><ul><li><a href="https://redis.io/" target="_blank" rel="noopener">Redis官网</a></li><li><a href="https://github.com/MicrosoftArchive/redis/" target="_blank" rel="noopener">Redis的GitHub项目</a></li><li><a href="http://try.redis.io/" target="_blank" rel="noopener">Redis在线试用</a></li><li><a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="noopener">Redis教程</a></li></ul><p><br> <br> <br> <br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows下Redis的安装与设置&lt;/p&gt;
    
    </summary>
    
      <category term="Windows工作环境搭建" scheme="https://ultronxr.xyz/categories/Windows%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="redis" scheme="https://ultronxr.xyz/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7下搭建Kubernetes(k8s)集群</title>
    <link href="https://ultronxr.xyz/2018/08/09/Create%20a%20kubernetes%20cluster%20on%20CentOS7/"/>
    <id>https://ultronxr.xyz/2018/08/09/Create a kubernetes cluster on CentOS7/</id>
    <published>2018-08-08T16:00:00.000Z</published>
    <updated>2018-12-22T10:50:08.520Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS 7下搭建Kubernetes(k8s)集群</p><a id="more"></a><h1 id="一、参考网址"><a href="#一、参考网址" class="headerlink" title="一、参考网址"></a>一、参考网址</h1><p><a href="http://www.mamicode.com/info-detail-2154289.html" target="_blank" rel="noopener">Centos7.3安装Kubernetes集群</a></p><p><br> <br> <br> <br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CentOS 7下搭建Kubernetes(k8s)集群&lt;/p&gt;
    
    </summary>
    
      <category term="Linux工作环境搭建" scheme="https://ultronxr.xyz/categories/Linux%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="docker" scheme="https://ultronxr.xyz/tags/docker/"/>
    
      <category term="kubernetes" scheme="https://ultronxr.xyz/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Windows环境下安装Ruby组件和配置，以及利用jekyll和GitHub Pages在GitHub上搭建个人博客</title>
    <link href="https://ultronxr.xyz/2018/08/08/Create%20ruby%20environment%20in%20Windows%20and%20build%20your%20own%20github%20blog%20with%20jekyll%20and%20GitHub%20Pages/"/>
    <id>https://ultronxr.xyz/2018/08/08/Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages/</id>
    <published>2018-08-07T16:00:00.000Z</published>
    <updated>2018-12-22T10:50:12.213Z</updated>
    
    <content type="html"><![CDATA[<p>Windows环境下安装Ruby组件和配置，以及利用jekyll和GitHub Pages在GitHub上搭建个人博客</p><a id="more"></a><h1 id="一、安装ruby和相关组件"><a href="#一、安装ruby和相关组件" class="headerlink" title="一、安装ruby和相关组件"></a>一、安装ruby和相关组件</h1><h2 id="1-下载ruby"><a href="#1-下载ruby" class="headerlink" title="1.下载ruby"></a>1.下载ruby</h2><p>在<a href="https://rubyinstaller.org/downloads/" target="_blank" rel="noopener">官网</a>下载ruby安装包.注意不要下载最新的，有些组件可能不支持最新版的ruby.</p><p>选择下图的安装包，或者使用这里提供的<a href="https://github.com/oneclick/rubyinstaller2/releases/download/rubyinstaller-2.4.4-2/rubyinstaller-devkit-2.4.4-2-x64.exe" target="_blank" rel="noopener">链接</a>直接下载ruby2.4.4x64的安装包.</p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\01.png" align="absmiddle" width="40%" height="40%"></div><h2 id="2-安装ruby"><a href="#2-安装ruby" class="headerlink" title="2.安装ruby"></a>2.安装ruby</h2><p>打开安装包，选择同意协议书点Next;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\02.png" align="absmiddle" width="60%" height="50%"></div><br><br></p><p>选择安装目录，我这里选择安装在 <code>D:\ruby_msys64</code> ，下面的三个选项都打勾;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\03.png" align="absmiddle" width="60%" height="50%"></div><br><br></p><p>点击Install之后弹出组件选择界面，这里的MSYS2一定要选上，点Next;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\04.png" align="absmiddle" width="60%" height="50%"></div><br><br></p><p>安装界面，等待安装完成;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\05.png" align="absmiddle" width="60%" height="50%"></div><br><br></p><p>安装完成之后直接点Finish，默认的勾勾着;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\06.png" align="absmiddle" width="60%" height="50%"></div><br><br></p><p>点击Finish后弹出来一个cmd窗口，有三个选项，输入3回车;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\07.png" align="absmiddle" width="80%" height="70%"></div><br><br></p><p>等待安装完成后的界面，回车退出</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\08.png" align="absmiddle" width="80%" height="70%"></div><br><br></p><p>如果没有弹出cmd窗口，可以手动打开cmd窗口输入 <code>ridk install</code>  ，会有和上一步同样的界面，按上一步做即可.</p><h2 id="3-下载gem"><a href="#3-下载gem" class="headerlink" title="3.下载gem"></a>3.下载gem</h2><p>下载安装gem，<a href="https://rubygems.org/pages/download" target="_blank" rel="noopener">官网</a>截图如下，选择zip版本，直接下载<a href="https://rubygems.org/rubygems/rubygems-2.7.7.zip" target="_blank" rel="noopener">链接</a>;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\09.png" align="absmiddle" width="80%" height="70%"></div><br><br></p><h2 id="4-安装gem"><a href="#4-安装gem" class="headerlink" title="4.安装gem"></a>4.安装gem</h2><p>把压缩包解压到指定文件夹，我这里是 <code>D:\ruby_msys64\rubygems-2.7.7</code> ，下面是解压出来的文件;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\10.png" align="absmiddle" width="70%" height="80%"></div><br><br></p><p>打开cmd窗口，cd进入这个文件夹，输入 <code>ruby setup.rb</code> ，下面正常安装后的界面;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\11.png" align="absmiddle" width="80%" height="70%"></div><br><br></p><h2 id="5-下载DevKit"><a href="#5-下载DevKit" class="headerlink" title="5.下载DevKit"></a>5.下载DevKit</h2><p>下载DevKit，<a href="https://rubyinstaller.org/downloads/" target="_blank" rel="noopener">官网</a>，安装包直接下载<a href="https://dl.bintray.com/oneclick/rubyinstaller/DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe" target="_blank" rel="noopener">链接</a>;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\12.png" align="absmiddle" width="60%" height="50%"></div><br><br></p><h2 id="6-安装DevKit"><a href="#6-安装DevKit" class="headerlink" title="6.安装DevKit"></a>6.安装DevKit</h2><p>打开安装包，选择目录，我这里解压到 <code>D:\ruby_msys64\DevKit</code> ，点Extract;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\13.png" align="absmiddle" width="50%" height="40%"></div><br><br></p><p>解压过程如下，等待解压完成;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\14.png" align="absmiddle" width="50%" height="40%"></div><br><br></p><p>这是解压出来的文件;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\15.png" align="absmiddle" width="80%" height="70%"></div><br><br></p><p>打开cmd，cd进入解压的路径，输入 <code>ruby dk.rb init</code> ，以下是初始化成功的界面;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\16.png" align="absmiddle" width="80%" height="70%"></div><br><br></p><p>输入 <code>ruby dk.rb install</code> ，以下是安装过程;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\17.png" align="absmiddle" width="80%" height="70%"></div><br><br></p><p>检查安装是否成功：输入 <code>gem install rdiscount --platform=ruby</code> ，如果正常安装显示以下界面，则安装成功;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\18.png" align="absmiddle" width="80%" height="70%"></div><br><br></p><p><br><br></p><h1 id="二、修改源"><a href="#二、修改源" class="headerlink" title="二、修改源"></a>二、修改源</h1><h2 id="1-修改MSYS2的源"><a href="#1-修改MSYS2的源" class="headerlink" title="1.修改MSYS2的源"></a>1.修改MSYS2的源</h2><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/msys2/" target="_blank" rel="noopener">教程链接</a></p><p>进入 <code>D:\ruby_msys64\Ruby24-x64\msys64\etc\pacman.d</code> 目录：</p><p>编辑mirrorlist.mingw32 ，在文件开头添加：</p><blockquote><p>Server = <a href="https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/i686" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/i686</a></p></blockquote><p>编辑mirrorlist.mingw64 ，在文件开头添加：</p><blockquote><p>Server = <a href="https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/x86_64" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/x86_64</a></p></blockquote><p>编辑mirrorlist.msys ，在文件开头添加：</p><blockquote><p>Server = <a href="https://mirrors.tuna.tsinghua.edu.cn/msys2/msys/$arch" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/msys2/msys/$arch</a></p></blockquote><p>然后打开 <code>D:\ruby_msys64\Ruby24-x64\msys64\msys2.exe</code> ，执行 <code>pacman -Sy</code> 刷新软件包数据即可.</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\19.png" align="absmiddle" width="80%" height="70%"></div><br><br></p><h2 id="2-修改gem的源"><a href="#2-修改gem的源" class="headerlink" title="2.修改gem的源"></a>2.修改gem的源</h2><p><a href="https://jingyan.baidu.com/article/4853e1e51c770f1909f726fe.html" target="_blank" rel="noopener">教程链接</a></p><p>查看当前使用的源地址，输入 <code>gem sources</code>;</p><p>删除默认的源地址，输入： <code>gem sources -r url地址</code></p><p>注：默认的url地址后必须有”/”,否则删不掉</p><p>添加国内的源地址: <code>gem sources -a https://gems.ruby-china.com</code></p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\20.png" align="absmiddle" width="80%" height="70%"></div><br><br></p><p>更新源的缓存: <code>gem sources -u</code></p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\21.png" align="absmiddle" width="60%" height="50%"></div><br><br></p><p><br><br></p><h1 id="三、安装bundle和jekyll"><a href="#三、安装bundle和jekyll" class="headerlink" title="三、安装bundle和jekyll"></a>三、安装bundle和jekyll</h1><h2 id="1-安装bundle"><a href="#1-安装bundle" class="headerlink" title="1.安装bundle"></a>1.安装bundle</h2><p>打开cmd窗口，输入 <code>gem install bundler</code> 后回车，提示是否覆盖输入y回车。以下是bundle安装成功界面：</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\22.png" align="absmiddle" width="80%" height="70%"></div><br><br></p><h2 id="2-安装jekyll"><a href="#2-安装jekyll" class="headerlink" title="2.安装jekyll"></a>2.安装jekyll</h2><p>打开cmd窗口，输入gem install jekyll 后回车，这里需要耐心一点，会安装挺久的。以下是安装成功界面：</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\23.png" align="absmiddle" width="80%" height="70%"></div><br><br></p><p>如果在”Building native extensions. This could take a while…”这里报错，说明DevKit没有安装好，验证安装DevKit是否成功那一步就应该通不过，重新安装DevKit即可。</p><p><br><br></p><h1 id="四、搭建博客和本地调试"><a href="#四、搭建博客和本地调试" class="headerlink" title="四、搭建博客和本地调试"></a>四、搭建博客和本地调试</h1><h2 id="1-第一种方法：直接fork别人现成的博客"><a href="#1-第一种方法：直接fork别人现成的博客" class="headerlink" title="1.第一种方法：直接fork别人现成的博客"></a>1.第一种方法：直接fork别人现成的博客</h2><p>先创建一个GitHub账户，然后登录，balabala…</p><p>这里以fork我的博客为例，先进入我的<a href="https://github.com/Ultronxr/ultronxr.github.io" target="_blank" rel="noopener">仓库</a>，点击右上角的fork按钮（我这里是自己看自己的仓库所以不能fork）;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\24.png" align="absmiddle" width="100%" height="100%"></div><br><br></p><p>fork完后博客就在自己的仓库里了。如果有CNAME文件的话，把这个文件删除（这个文件是自定义域名的文件，不删掉的话会域名冲突），修改完成后点击Commit提交修改;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\25.png" align="absmiddle" width="100%" height="100%"></div><br><br></p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\26.png" align="absmiddle" width="100%" height="100%"></div><br><br><br></p><p>点击Settings按钮进入仓库设置;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\27.png" align="absmiddle" width="100%" height="100%"></div><br><br><br></p><p>先设置项目名称，改成 <code>*.github.io</code> 的形式，<code>*</code> 的位置是自己GitHub的用户名;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\28.png" align="absmiddle" width="100%" height="100%"></div><br><br><br></p><p>修改完成后向下拉，看到GitHub Pages的地方，显示 <code>Your site is published at https://*.github.io</code> 就可以了，你就可以通过浏览器访问这个网址，看到你的博客网站，只不过现在里面显示的还是我的内容，后面可以慢慢改;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\29.png" align="absmiddle" width="100%" height="100%"></div><br><br><br></p><p>然后使用git clone整个项目克隆到本地，进行修改;</p><p>根目录下部分文件夹的作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">_config.yml : 全局配置文件，按照其中的注释说明修改成自己的内容</span><br><span class="line">README.md   : 项目说明文件</span><br><span class="line">CNAME       : 可能存在可能不存在，存在的话说明博客网站被解析到别的域名，域名记录在文件中</span><br><span class="line"></span><br><span class="line">_posts/     : 放博客文章的文件夹，里面的文件是markdown文件格式</span><br><span class="line">assets/     : 博客中用到的媒体等资源的文件</span><br><span class="line">_layouts/   : 博客页面的模版框架</span><br><span class="line">page/       : 主菜单中每个页面的模版框架</span><br><span class="line"></span><br><span class="line">其他的文件夹是各页面的HTML文件，你可以点进去看看，尝试改变一下</span><br></pre></td></tr></table></figure><p><br><br></p><p>下面是博客页面的本地调试方法：</p><p>先把GitHub博客项目clone到本地;</p><p>打开cmd窗口，cd进入项目文件夹，输入 <code>gem install github-pages</code> ，系统会自动安装需要的组件，安装成功的界面如下;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\30.png" align="absmiddle" width="90%" height="80%"></div><br><br><br></p><p>在cmd窗口输入 <code>jekyll server --watch</code> 命令，显示如下，在浏览器里输入显示的Server address后面的网址就可以预览博客网站，按ctrl+c可以停止预览</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\31.png" align="absmiddle" width="90%" height="80%"></div><br><br><br></p><p>调试完成后的博客可以push到GitHub项目仓库中.</p><p><br><br></p><h2 id="2-第二种方法：自己在GitHub上新建一个GitHub-Pages"><a href="#2-第二种方法：自己在GitHub上新建一个GitHub-Pages" class="headerlink" title="2.第二种方法：自己在GitHub上新建一个GitHub Pages"></a>2.第二种方法：自己在GitHub上新建一个GitHub Pages</h2><p>新建一个项目仓库，在仓库页面顶部点击New按钮;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\32.png" align="absmiddle" width="100%" height="100%"></div><br><br><br></p><p>在新建页面填写项目名称，博客的名称是 <code>*.github.io</code> 的形式， <code>*</code> 是自己的GitHub用户名，填写项目描述（可选），选择Public，创建一个README文件，完成后点击Create repository按钮，创建完成;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\33.png" align="absmiddle" width="100%" height="100%"></div><br><br><br></p><p>创建完成后在项目顶部点击Settings按钮进入设置;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\34.png" align="absmiddle" width="100%" height="100%"></div><br><br><br></p><p>下拉直到GitHub Pages的地方可以看到 <code>Your site is published at https://*.github.io</code>的信息，说明已经创建成功（可以通过浏览器访问这个网址进入博客页面），点击Choose a theme按钮选择博客的主题样式;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\35.png" align="absmiddle" width="100%" height="100%"></div><br><br><br></p><p>选择一个主题样式，点击Select theme按钮，完成选择;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\36.png" align="absmiddle" width="100%" height="100%"></div><br><br><br></p><p>跳转到README文件编辑页面，README文件主要记录着项目的相关信息和主题样式的相关信息等，可以自己修改内容，也可以下拉到底部点击Commit changes直接跳过这一步以后再修改;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\37.png" align="absmiddle" width="100%" height="100%"></div><br><br><br></p><p>新建项目完成后，可以尝试进入博客网址查看新建的博客页面;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\38.png" align="absmiddle" width="100%" height="100%"></div><br><br><br></p><p>用这种方法创建的博客的本地调试博客方法与第一种相同，调试完成后的博客可以push到GitHub项目仓库中.</p><h2 id="3-使用jekyll在本地创建一个博客模版"><a href="#3-使用jekyll在本地创建一个博客模版" class="headerlink" title="3.使用jekyll在本地创建一个博客模版"></a>3.使用jekyll在本地创建一个博客模版</h2><p>在本地cmd窗口运行jekyll new blog命令，会在本地创建一个完整的博客模版，创建的速度可能会很慢，和网速有关。创建的位置会在窗口中显示，可以把整个文件夹剪切到别的目录下;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\39.png" align="absmiddle" width="90%" height="80%"></div><br><br><br></p><p>根目录文件内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Gemfile     : 内容是博客相关所需的组件</span><br><span class="line">_config.yml : 记录博客的配置内容</span><br><span class="line"></span><br><span class="line">_posts/     : 文件夹下是博客页面（markdown格式的页面，写也要按照这个格式）</span><br></pre></td></tr></table></figure><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\40.png" align="absmiddle" width="100%" height="100%"></div><br><br><br></p><p>打开cmd窗口，cd到文件夹的目录位置下，输入 <code>bundle install</code> 命令，命令会根据当前目录下的Gemfile，安装所需要的所有软件。这一步所安装的东西，可以说跟github本身的环境是完全一致的，所以可以确保本地如果没有错误，上传后也不会有错误；如果以后修改了Gemfile，可以执行 <code>bundle update</code> 命令进行更新;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\41.png" align="absmiddle" width="90%" height="80%"></div><br><br><br></p><p>下面是博客页面的本地调试方法：</p><p>在该路径下执行 <code>bundle exec jekyll serve</code> 命令，系统会在本地开启博客页面预览，在浏览器里输入Server address后面显示的网址就可以预览，使用ctrl+c关闭预览;</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\42.png" align="absmiddle" width="90%" height="80%"></div><br><br><br></p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\43.png" align="absmiddle" width="100%" height="100%"></div><br><br><br></p><p>调试完成后的博客可以push到GitHub项目仓库中.</p><p><br><br></p><h1 id="五、把你的博客解析到别的域名"><a href="#五、把你的博客解析到别的域名" class="headerlink" title="五、把你的博客解析到别的域名"></a>五、把你的博客解析到别的域名</h1><p>GitHub Pages的页面很难被百度等搜索引擎抓取，也就是说你的博客很难被别人发现，这时如果你有另外注册的域名，就可以用来解析这个博客网址.（或者使用Coding Net等第三方项目托管平台，我本人没试过，你们可以试试）</p><p>在项目的Settings下的GitHub Pages中的Custom domain修改（修改了这里就不用手动修改后面的CNAME文件了，系统会自动创建）; 或者在项目根目录下新建一个文件CNAME，里面写你的域名（域名不需要写<a href="https://www的部分），修改好后就可以在GitHub" target="_blank" rel="noopener">https://www的部分），修改好后就可以在GitHub</a> Pages的提示中看到 <code>Your site is published at https://.......</code> ，这样就可以通过自己的域名访问你的博客</p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\44.png" align="absmiddle" width="100%" height="100%"></div><br><br><br></p><p><div><img src="\assets\images\2018-08-08-Create ruby environment in Windows and build your own github blog with jekyll and GitHub Pages\45.png" align="absmiddle" width="100%" height="100%"></div><br><br><br></p><p><br><br></p><h1 id="六、博客页面的撰写"><a href="#六、博客页面的撰写" class="headerlink" title="六、博客页面的撰写"></a>六、博客页面的撰写</h1><h2 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h2><p>markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等）.</p><p>GitHub Pages上的博客页面都是使用markdown语言编写的，所以先学学markdown才能写博客（可能我以后会总结一下markdown的语法写个博客(挖坟预定)）.</p><p>博客文件的位置在根目录的 <code>_post</code> 文件夹下，命名规则为 <code>yyyy-mm-dd-NameOfBlog.md</code> 如 <code>2018-01-01-my first blog.md</code> .</p><p><br><br></p><h1 id="七、其他"><a href="#七、其他" class="headerlink" title="七、其他"></a>七、其他</h1><h2 id="jekyll主题官网"><a href="#jekyll主题官网" class="headerlink" title="jekyll主题官网"></a>jekyll主题官网</h2><p>里面有很多其他的主题，可以<a href="http://jekyllthemes.org/" target="_blank" rel="noopener">点此</a>跳转.</p><p>找到合适的主题后点进去，可以直接Download，或者GitHub页面fork过来然后clone到本地修改.</p><p>别人创建的主题拿过来之后，需要修改其中的 <code>_config.yml</code> 配置文件，把里面的内容修改成自己的信息，同时其他内容的修改可以参照 <code>README</code> 文件</p><p>修改完成后可以本地预览调试，然后push到自己的GitHub;</p><p><br><br><br><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows环境下安装Ruby组件和配置，以及利用jekyll和GitHub Pages在GitHub上搭建个人博客&lt;/p&gt;
    
    </summary>
    
      <category term="Windows工作环境搭建" scheme="https://ultronxr.xyz/categories/Windows%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="jekyll" scheme="https://ultronxr.xyz/tags/jekyll/"/>
    
      <category term="ruby" scheme="https://ultronxr.xyz/tags/ruby/"/>
    
      <category term="blog" scheme="https://ultronxr.xyz/tags/blog/"/>
    
  </entry>
  
</feed>
